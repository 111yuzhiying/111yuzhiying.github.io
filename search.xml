<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>将json格式的标注数据转化为YOLO格式的txt格式</title>
      <link href="/2023/11/13/%E5%B0%86json%E6%A0%BC%E5%BC%8F%E7%9A%84%E6%A0%87%E6%B3%A8%E6%95%B0%E6%8D%AE%E8%BD%AC%E5%8C%96%E4%B8%BAYOLO%E6%A0%BC%E5%BC%8F%E7%9A%84txt%E6%A0%BC%E5%BC%8F/"/>
      <url>/2023/11/13/%E5%B0%86json%E6%A0%BC%E5%BC%8F%E7%9A%84%E6%A0%87%E6%B3%A8%E6%95%B0%E6%8D%AE%E8%BD%AC%E5%8C%96%E4%B8%BAYOLO%E6%A0%BC%E5%BC%8F%E7%9A%84txt%E6%A0%BC%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h5 id="YOLO需要的数据格式"><a href="#YOLO需要的数据格式" class="headerlink" title="YOLO需要的数据格式"></a>YOLO需要的数据格式</h5><p>​    YOLO需要的数据格式为： 类别id、中心点x坐标、中心点y坐标、w、h（相对于图片宽高）。现需要每张图片对应一个txt文件<br>如下所示：<br>图片名.txt</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">4 0.389688 0.298564 0.779375 0.597128</span><br></pre></td></tr></table></figure><h5 id="现有数据格式"><a href="#现有数据格式" class="headerlink" title="现有数据格式"></a>现有数据格式</h5><p>​    现在有的只有下面这种结构的json数据格式文件(数据来源：<a href="https://aistudio.baidu.com/datasetdetail/183255/0)%EF%BC%9A">https://aistudio.baidu.com/datasetdetail/183255/0)：</a></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;images&quot;:[</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;file_name&quot;:&quot;00000.jpg&quot;,</span><br><span class="line">            &quot;height&quot;:1184,</span><br><span class="line">            &quot;width&quot;:1600,</span><br><span class="line">            &quot;id&quot;:0  </span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;file_name&quot;:&quot;00001.jpg&quot;,</span><br><span class="line">            &quot;height&quot;:1184,</span><br><span class="line">            &quot;width&quot;:1600,</span><br><span class="line">            &quot;id&quot;:1  </span><br><span class="line">        &#125;,</span><br><span class="line">    ],</span><br><span class="line">    &quot;type&quot;:&quot;instances&quot;,</span><br><span class="line">    &quot;annotations&quot;:[</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;area&quot;: 7008,</span><br><span class="line">            &quot;iscrowd&quot;: 0,</span><br><span class="line">            &quot;image_id&quot;: 0,</span><br><span class="line">            &quot;bbox&quot;: [</span><br><span class="line">                1143,</span><br><span class="line">                593,</span><br><span class="line">                146,</span><br><span class="line">                48</span><br><span class="line">            ],</span><br><span class="line">            &quot;category_id&quot;: 2,</span><br><span class="line">            &quot;id&quot;: 1,</span><br><span class="line">            &quot;ignore&quot;: 0,</span><br><span class="line">            &quot;segmentation&quot;: []</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;area&quot;: 83190,</span><br><span class="line">            &quot;iscrowd&quot;: 0,</span><br><span class="line">            &quot;image_id&quot;: 1,</span><br><span class="line">            &quot;bbox&quot;: [</span><br><span class="line">                1195,</span><br><span class="line">                944,</span><br><span class="line">                354,</span><br><span class="line">                235</span><br><span class="line">            ],</span><br><span class="line">            &quot;category_id&quot;: 6,</span><br><span class="line">            &quot;id&quot;: 2,</span><br><span class="line">            &quot;ignore&quot;: 0,</span><br><span class="line">            &quot;segmentation&quot;: []</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    &quot;categories&quot;:[</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;supercategory&quot;: &quot;none&quot;,</span><br><span class="line">            &quot;id&quot;: 1,</span><br><span class="line">            &quot;name&quot;: &quot;Crack&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;supercategory&quot;: &quot;none&quot;,</span><br><span class="line">            &quot;id&quot;: 2,</span><br><span class="line">            &quot;name&quot;: &quot;Manhole&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对应的操作代码为：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import os  </span><br><span class="line">import json  </span><br><span class="line">  </span><br><span class="line"># 读取JSON文件  </span><br><span class="line">with open(&#x27;train.json&#x27;, &#x27;r&#x27;) as f:  </span><br><span class="line">    data = json.load(f)  </span><br><span class="line">  </span><br><span class="line"># 创建新的文件夹  </span><br><span class="line">folder_path = &#x27;txt_id5&#x27;  </span><br><span class="line">if not os.path.exists(folder_path):  </span><br><span class="line">    os.makedirs(folder_path)  </span><br><span class="line">for annotation in data[&#x27;annotations&#x27;]:</span><br><span class="line">    if annotation[&#x27;category_id&#x27;] == 5:</span><br><span class="line">        image_id = annotation[&#x27;image_id&#x27;]</span><br><span class="line">        for images in data[&#x27;images&#x27;]:</span><br><span class="line">            if images[&#x27;id&#x27;] == image_id:</span><br><span class="line">                x = (annotation[&#x27;bbox&#x27;][0] + annotation[&#x27;bbox&#x27;][2]) / 2 / images[&#x27;width&#x27;]</span><br><span class="line">                y = (annotation[&#x27;bbox&#x27;][1] + annotation[&#x27;bbox&#x27;][3]) / 2 / images[&#x27;height&#x27;]</span><br><span class="line">                w = (annotation[&#x27;bbox&#x27;][2] + annotation[&#x27;bbox&#x27;][0]) / images[&#x27;width&#x27;]</span><br><span class="line">                h = (annotation[&#x27;bbox&#x27;][3] + annotation[&#x27;bbox&#x27;][1]) / images[&#x27;height&#x27;]</span><br><span class="line">                file_name = images[&#x27;file_name&#x27;]</span><br><span class="line">                file_path = os.path.join(folder_path,file_name[:-4]+&#x27;.txt&#x27;)</span><br><span class="line">                with open(file_path,&#x27;w&#x27;) as f:</span><br><span class="line">                    # f.write(str(annotation[&#x27;category_id&#x27;])+&#x27; &#x27;+str(round(x,6))+&#x27; &#x27;+str(round(y,6))+&#x27; &#x27;+str(round(w,6))+&#x27; &#x27;+str(round(h,6)))</span><br><span class="line">                    f.write(&#x27;6&#x27;+&#x27; &#x27;+str(round(x,6))+&#x27; &#x27;+str(round(y,6))+&#x27; &#x27;+str(round(w,6))+&#x27; &#x27;+str(round(h,6)))</span><br><span class="line">                    </span><br></pre></td></tr></table></figure><p>然后每张图片的txt文件将会在对应文件夹中保存，如下图所示:</p><p><img src="https://raw.githubusercontent.com/111yuzhiying/img/main/img/202311130835469.png" alt="image-20231113083521831"></p><p>然后后续需要将每一类别txt文件对应的图片也从整个的文件夹中复制到自定义的目标文件夹中，相应的操作代码为：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import os  </span><br><span class="line">import shutil  </span><br><span class="line">import json  </span><br><span class="line"># 源文件夹路径  </span><br><span class="line">source_folder = &#x27;images&#x27;  </span><br><span class="line">  </span><br><span class="line"># 目标文件夹路径  </span><br><span class="line">target_folder = &#x27;category_id8&#x27;    </span><br><span class="line"></span><br><span class="line"># 读取JSON文件  </span><br><span class="line">with open(&#x27;train.json&#x27;, &#x27;r&#x27;) as f:  </span><br><span class="line">    data = json.load(f)  </span><br><span class="line"></span><br><span class="line">for annotation in data[&#x27;annotations&#x27;]:</span><br><span class="line">    if annotation[&#x27;category_id&#x27;] == 8:</span><br><span class="line">        image_id = annotation[&#x27;image_id&#x27;]</span><br><span class="line">        for images in data[&#x27;images&#x27;]:</span><br><span class="line">            if images[&#x27;id&#x27;] == image_id:</span><br><span class="line">                file_name = images[&#x27;file_name&#x27;][:-4]</span><br><span class="line">                # 构建图片文件路径  </span><br><span class="line">                source_image_path = os.path.join(source_folder, file_name + &#x27;.jpg&#x27;)  </span><br><span class="line">                </span><br><span class="line">                # 构建目标图片文件路径  </span><br><span class="line">                target_image_path = os.path.join(target_folder, file_name + &#x27;.jpg&#x27;)  </span><br><span class="line"></span><br><span class="line">                # 复制文件  </span><br><span class="line">                shutil.copy2(source_image_path, target_image_path)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CV </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CV数据处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构实验计算表达式</title>
      <link href="/2023/10/22/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E9%AA%8C%E8%AE%A1%E7%AE%97%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/2023/10/22/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E9%AA%8C%E8%AE%A1%E7%AE%97%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h3 id="做了一天的数据结构实验——能够进行算术表达式的计算"><a href="#做了一天的数据结构实验——能够进行算术表达式的计算" class="headerlink" title="做了一天的数据结构实验——能够进行算术表达式的计算"></a>做了一天的数据结构实验——能够进行算术表达式的计算</h3><p>根据书上的思路，书上只能够处理后缀表达式，但题目要求是输入的是中缀表达式，因此需要进行转化</p><ul><li><p>中缀表达式转后缀表达式的思路</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、先读入输入的数据，用getline(cin,s)的方式；</span><br><span class="line">2、搞一个中间栈，用于存放遍历数组时遇到的符号，方便后续能够将符号弹出到后续表达式上；</span><br><span class="line">3、注意提取数字、运算符号的方式；</span><br></pre></td></tr></table></figure></li></ul><p><img src="https://raw.githubusercontent.com/111yuzhiying/img/main/img/202310221727727.jpg" alt="cc5afe78eb8809e18c4ce7bfd67b02f"></p><ul><li><p>一些小知识点</p><p>1、可以通过控制数据输入流的方式，对流入的数据进行处理，从而可以将输入的算术表达式中的数字提取为double型数据</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (infile &gt;&gt; ch, ch != <span class="string">&#x27;#&#x27;</span>) &#123;</span><br><span class="line"><span class="keyword">switch</span> (ch) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>:<span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>:<span class="keyword">case</span> <span class="string">&#x27;*&#x27;</span>:<span class="keyword">case</span> <span class="string">&#x27;/&#x27;</span>:</span><br><span class="line"><span class="built_in">DoOperator</span>(ch);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:infile.<span class="built_in">putback</span>(ch);  <span class="comment">// 这里的putback是真让我大开眼界</span></span><br><span class="line"></span><br><span class="line">infile &gt;&gt; newOperand;</span><br><span class="line"></span><br><span class="line"><span class="built_in">AddOperand</span>(newOperand);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、string类型数据怎么能作为需要char星类型函数的参数，方法是直接将string类型数据的首地址作为那一个char星类型的参数</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">getop</span><span class="params">(<span class="type">char</span>* src, <span class="type">int</span> start, <span class="type">int</span>&amp; nextstart, <span class="type">char</span>* token)</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> i, j;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">IsNumber</span>(src[start])) &#123;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; <span class="built_in">IsNumber</span>(src[start + i]) || src[start + i] == <span class="string">&#x27;.&#x27;</span>; i++) &#123;</span><br><span class="line">token[i] = src[start + i]; <span class="comment">// 其实token就是用来提取表达式中的值的</span></span><br><span class="line">&#125;</span><br><span class="line">token[i] = <span class="number">0</span>;  <span class="comment">// 注意，此处的0并非是字符的‘0’，而是数字0，因此可以用来作为for循环的终止判断条件</span></span><br><span class="line">nextstart = start + i; <span class="comment">// 下一次用于提取表达式中的数字</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> ((src[start] == <span class="string">&#x27;+&#x27;</span> || src[start] == <span class="string">&#x27;-&#x27;</span>) &amp;&amp; (start == <span class="number">0</span> || src[start - <span class="number">1</span>] == <span class="string">&#x27;(&#x27;</span>)) &#123;</span><br><span class="line"><span class="comment">// 确保存进来的这一位是一个带符号数，后面的判断条件就是限制其满足符号数的规则</span></span><br><span class="line"><span class="keyword">if</span> (src[start] == <span class="string">&#x27;-&#x27;</span>) &#123;</span><br><span class="line">token[<span class="number">0</span>] = src[start];</span><br><span class="line">j = <span class="number">1</span>;  <span class="comment">// 如果是负号的话，就把负号给token[0],然后j=1就是从第二位开始把负号输进去</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 去掉正号的情况</span></span><br><span class="line">j = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; <span class="built_in">IsNumber</span>(src[start + i]) || src[start + i] == <span class="string">&#x27;.&#x27;</span>; i++) &#123;</span><br><span class="line"><span class="comment">// 将后面的数值添加到token里面</span></span><br><span class="line">token[j++] = src[start + i];</span><br><span class="line">&#125;</span><br><span class="line">token[j] = <span class="number">0</span>;  <span class="comment">// 可以简单的理解为以0作为token的一个分割符，事实上也可以用‘ ’开作为其分隔符的</span></span><br><span class="line">nextstart = start + i;<span class="comment">// 下一次提取的开端</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">token[<span class="number">0</span>] = src[start]; <span class="comment">// 从输入流中将该符号进行提取</span></span><br><span class="line">token[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">nextstart = start + <span class="number">1</span>;<span class="comment">// 下一次提取的开端</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// 不是数据</span></span><br><span class="line">&#125;</span><br><span class="line">string zhong;</span><br><span class="line"><span class="type">char</span> hou[<span class="number">100</span>]=<span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="comment">//char zhong[100]=&quot;&quot;,hou[100] = &quot;&quot;;</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; &quot;请输入一句中缀表达式：&quot; &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//getline(cin, zhong);</span></span><br><span class="line">zhong = gouZhao;</span><br><span class="line"><span class="comment">//cin.getline(zhong,100);</span></span><br><span class="line"><span class="comment">// 进行中缀转后缀</span></span><br><span class="line"><span class="built_in">Zhong2Hou</span>(&amp;zhong[<span class="number">0</span>], hou);</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>数据结构类模板</title>
      <link href="/2023/10/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%B1%BB%E6%A8%A1%E6%9D%BF/"/>
      <url>/2023/10/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%B1%BB%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<ul><li><p>其实就是个数据结构的基础作业，其中的从文件直接读入功能总是会有bug，后来查到是没有初始化cur指针，让其指向了NULL，所以造成后续的文件内容读入造成困难（此处特别感谢江荣哥的帮助@Aurora）<br>下面就贴一下代码吧：<br>存在错误的代码：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">template&lt;class T&gt;</span><br><span class="line">void List&lt;T&gt;::getInfo() &#123;</span><br><span class="line">ifstream ifs(&quot;database.txt&quot;,ios::in);</span><br><span class="line">char ch;</span><br><span class="line">if (!ifs) &#123; cerr &lt;&lt; &quot;读取数据失败！&quot; &lt;&lt; endl; exit(1); &#125;</span><br><span class="line">ifs.get(ch);</span><br><span class="line">if (ifs.eof()) cout &lt;&lt; &quot;该文件尚未输入数据！&quot; &lt;&lt; endl;</span><br><span class="line">else &#123;</span><br><span class="line">LinkNode&lt;T&gt;* cur = first-&gt;link ;</span><br><span class="line">first-&gt;link = cur;</span><br><span class="line">while (!ifs.eof()) &#123;</span><br><span class="line">ifs.unget();</span><br><span class="line">char temp;</span><br><span class="line">ifs &gt;&gt; cur-&gt;data.stuId &gt;&gt; cur-&gt;data.stuName &gt;&gt; cur-&gt;data.stuBirthday &gt;&gt; cur-&gt;data.stuGender &gt;&gt; cur-&gt;data.stuBody&gt;&gt;temp;</span><br><span class="line">cout &lt;&lt; &quot;学号：&quot; &lt;&lt; cur-&gt;data.stuId &lt;&lt; &#x27; &#x27; &lt;&lt; &quot;姓名：&quot; &lt;&lt; cur-&gt;data.stuName &lt;&lt; &#x27; &#x27; &lt;&lt; &quot;生日：&quot; &lt;&lt; cur-&gt;data.stuBirthday &lt;&lt; &#x27; &#x27; &lt;&lt;&quot;性别：&quot; &lt;&lt; cur-&gt;data.stuGender &lt;&lt; &#x27; &#x27; &lt;&lt; &quot;健康状况：&quot; &lt;&lt; cur-&gt;data.stuBody&lt;&lt;endl;</span><br><span class="line">LinkNode&lt;T&gt;* theNext = new LinkNode&lt;T&gt;;</span><br><span class="line">cur-&gt;link = theNext;</span><br><span class="line">cur = theNext;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; &quot;读取成功&quot; &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">template&lt;class T&gt;</span><br><span class="line">void List&lt;T&gt;::getInfo() &#123;</span><br><span class="line">ifstream ifs(&quot;database.txt&quot;,ios::in);</span><br><span class="line">char ch;</span><br><span class="line">if (!ifs) &#123; cerr &lt;&lt; &quot;读取数据失败！&quot; &lt;&lt; endl; exit(1); &#125;</span><br><span class="line">ifs.get(ch);</span><br><span class="line">if (ifs.eof()) cout &lt;&lt; &quot;该文件尚未输入数据！&quot; &lt;&lt; endl;</span><br><span class="line">else &#123;</span><br><span class="line">LinkNode&lt;T&gt;* cur = new LinkNode&lt;T&gt;;</span><br><span class="line">first-&gt;link = cur;</span><br><span class="line">while (!ifs.eof()) &#123;</span><br><span class="line">ifs.unget();</span><br><span class="line">char temp;</span><br><span class="line">ifs &gt;&gt; cur-&gt;data.stuId &gt;&gt; cur-&gt;data.stuName &gt;&gt; cur-&gt;data.stuBirthday &gt;&gt; cur-&gt;data.stuGender &gt;&gt; cur-&gt;data.stuBody&gt;&gt;temp;</span><br><span class="line">cout &lt;&lt; &quot;学号：&quot; &lt;&lt; cur-&gt;data.stuId &lt;&lt; &#x27; &#x27; &lt;&lt; &quot;姓名：&quot; &lt;&lt; cur-&gt;data.stuName &lt;&lt; &#x27; &#x27; &lt;&lt; &quot;生日：&quot; &lt;&lt; cur-&gt;data.stuBirthday &lt;&lt; &#x27; &#x27; &lt;&lt;&quot;性别：&quot; &lt;&lt; cur-&gt;data.stuGender &lt;&lt; &#x27; &#x27; &lt;&lt; &quot;健康状况：&quot; &lt;&lt; cur-&gt;data.stuBody&lt;&lt;endl;</span><br><span class="line">LinkNode&lt;T&gt;* theNext = new LinkNode&lt;T&gt;;</span><br><span class="line">cur-&gt;link = theNext;</span><br><span class="line">cur = theNext;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; &quot;读取成功&quot; &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>另外我感觉上面的关于文件读入的内容可以考虑江荣的那种while方法，即</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">while(cur-&gt;data.stuId &gt;&gt;cur-&gt;data.stuName &gt;&gt; cur-&gt;data.stuBirthday &gt;&gt; cur-&gt;data.stuGender &gt;&gt; cur-&gt;data.stuBody&gt;&gt;temp)</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于手滑删错了docker文件夹无了一晚的经验</title>
      <link href="/2023/09/27/%E5%85%B3%E4%BA%8E%E6%89%8B%E6%BB%91%E5%88%A0%E9%94%99%E4%BA%86docker%E6%96%87%E4%BB%B6%E5%A4%B9%E6%97%A0%E4%BA%86%E4%B8%80%E6%99%9A%E7%9A%84%E7%BB%8F%E9%AA%8C/"/>
      <url>/2023/09/27/%E5%85%B3%E4%BA%8E%E6%89%8B%E6%BB%91%E5%88%A0%E9%94%99%E4%BA%86docker%E6%96%87%E4%BB%B6%E5%A4%B9%E6%97%A0%E4%BA%86%E4%B8%80%E6%99%9A%E7%9A%84%E7%BB%8F%E9%AA%8C/</url>
      
        <content type="html"><![CDATA[<h1 id="哭"><a href="#哭" class="headerlink" title="哭"></a>哭</h1><p>今晚本来想着docker太大了，且在windows中直接在安装时默认安装到了C盘，看着C盘红彤彤的颜色真很触目惊心。然后上网看怎么把docker数据移至D盘，然后一顿操作猛如虎，最后还是败在了手滑上了————本来要删的docker—data删成了docker-desk-top，然后开始了漫漫长路的重装。</p><p>重装过程中不断踩坑，包括已经卸载后，重新安装时显示已更新（其实就是没有卸载干净）。在折腾了好一晚的时间后，终于还是文心一言救了我的狗命（doge），此处要给文心一言点个赞。</p><p>根据文心一言提供的方法，可以彻底的卸载docker，其实也就是启动docker内部的uninstall程序，具体的方法如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">在Windows 10上完全卸载Docker可以参考以下步骤：</span><br><span class="line"></span><br><span class="line">1、打开“控制面板”，选择“卸载程序”，在出现的窗口中选择“卸载/更改”，然后按照提示进行操作。</span><br><span class="line">2、重启电脑后，手动删除以下文件和文件夹：</span><br><span class="line">- 删除 C:\Program Files\Docker 文件夹</span><br><span class="line">- 删除 C:\ProgramData\DockerDesktop 文件夹</span><br><span class="line">- 打开 C:\Users\用户名\AppData\Local\Microsoft\WindowsApps，删除 DockerDesktop.exe 文件</span><br><span class="line">- 打开 C:\Users\用户名\AppData\LocalLow\Microsoft\WindowsApps，删除 DockerDesktop.exe 文件</span><br><span class="line">3、打开命令提示符（管理员），输入以下命令来卸载 Docker：</span><br><span class="line">- del /q - &quot;%ALLUSERSPROFILE%\Microsoft\WindowsApps\DockerDesktop.exe&quot;</span><br><span class="line">- del /q - &quot;%LocalAppData%\Microsoft\WindowsApps\DockerDesktop.exe&quot;</span><br><span class="line">4、最后在命令提示符中输入以下命令来重启电脑：</span><br><span class="line">- shutdown /r /t 0</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>数据结构作业学生健康管理系统</title>
      <link href="/2023/09/15/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E7%94%9F%E5%81%A5%E5%BA%B7%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/"/>
      <url>/2023/09/15/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E7%94%9F%E5%81%A5%E5%BA%B7%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="数据结构作业遇到的问题"><a href="#数据结构作业遇到的问题" class="headerlink" title="数据结构作业遇到的问题"></a>数据结构作业遇到的问题</h1><ul><li>C++ : 出错解释 base operand of ‘-&gt;’ has non-pointer type ‘std::pair&lt;int, int&gt;’<br>由于是在项目作业里面的，代码量比较长，故此处引用csdn上的类似报错代码</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">list&lt;pair&lt;int,int&gt;&gt; cachelist;</span><br><span class="line">unordered_map&lt;int,list&lt;pair&lt;int,int&gt;&gt;::iterator&gt; map;</span><br><span class="line"></span><br><span class="line">void put(int key, int value) &#123;</span><br><span class="line">    auto it = map.find(key);</span><br><span class="line">    if(it != map.end())&#123;</span><br><span class="line">        touch(it-&gt;second);</span><br><span class="line">        it-&gt;second-&gt;second = value; // </span><br><span class="line">    &#125;</span><br><span class="line">    else if(map.size() &lt; cap)&#123;</span><br><span class="line">        cachelist.push_front(make_pair(key,value));</span><br><span class="line">        map[key]=cachelist.begin();</span><br><span class="line">    &#125;</span><br><span class="line">    else&#123;</span><br><span class="line">        auto it = cachelist.back();// </span><br><span class="line">        map.erase(it-&gt;first); // 出错位置~~！！</span><br><span class="line">        cachelist.pop_back();</span><br><span class="line">        cachelist.push_front(make_pair(key,value));</span><br><span class="line">        map[key]=cachelist.begin();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码中的错误关键代码处</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">it-&gt;first</span><br></pre></td></tr></table></figure><p>这里需要知道的是“-&gt;”是适用于指针的形式，其本质是从指针上面调用地址方面，即&amp;。只有这样才可以用箭头指向符。而上述代码中it这个变量不是指针，而是一个int类型数据，其并无“-&gt;”的用法，所以此处要用“.”作为具体内容的引入。</p><ul><li>jump to case label [-fpermissive]报错<br>该报错的原因是switch case语句中定义新变量的时候并未限定该新变量的范围，故保持错误。具体的错误代码如下：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">switch(choice)&#123;</span><br><span class="line">    case 1:int a=2;break;</span><br><span class="line">    case 2:break;</span><br><span class="line">    default:break;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>正确的代码应为：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">switch(choice)&#123;</span><br><span class="line">    case 1:&#123;</span><br><span class="line">        int a=2;</span><br><span class="line">        break;</span><br><span class="line">    &#125;</span><br><span class="line">    case 2:break;</span><br><span class="line">    default:break;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> debug </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日常小bug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>B站大佬的关于MySQL的详细笔记及链接</title>
      <link href="/2023/08/02/MySQL%E7%9A%84%E8%AF%A6%E7%BB%86%E7%89%88%E6%9C%AC%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/08/02/MySQL%E7%9A%84%E8%AF%A6%E7%BB%86%E7%89%88%E6%9C%AC%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="基础篇"><a href="#基础篇" class="headerlink" title="基础篇"></a>基础篇</h1><h2 id="通用语法及分类"><a href="#通用语法及分类" class="headerlink" title="通用语法及分类"></a>通用语法及分类</h2><ul><li>DDL: 数据定义语言，用来定义数据库对象（数据库、表、字段）</li><li>DML: 数据操作语言，用来对数据库表中的数据进行增删改</li><li>DQL: 数据查询语言，用来查询数据库中表的记录</li><li>DCL: 数据控制语言，用来创建数据库用户、控制数据库的控制权限</li></ul><h3 id="DDL（数据定义语言）"><a href="#DDL（数据定义语言）" class="headerlink" title="DDL（数据定义语言）"></a>DDL（数据定义语言）</h3><p>数据定义语言</p><h4 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h4><p>查询所有数据库：<br><code>SHOW DATABASES;</code><br>查询当前数据库：<br><code>SELECT DATABASE();</code><br>创建数据库：<br><code>CREATE DATABASE [ IF NOT EXISTS ] 数据库名 [ DEFAULT CHARSET 字符集] [COLLATE 排序规则 ];</code><br>删除数据库：<br><code>DROP DATABASE [ IF EXISTS ] 数据库名;</code><br>使用数据库：<br><code>USE 数据库名;</code></p><h5 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h5><ul><li>UTF8字符集长度为3字节，有些符号占4字节，所以推荐用utf8mb4字符集</li></ul><h4 id="表操作"><a href="#表操作" class="headerlink" title="表操作"></a>表操作</h4><p>查询当前数据库所有表：<br><code>SHOW TABLES;</code><br>查询表结构：<br><code>DESC 表名;</code><br>查询指定表的建表语句：<br><code>SHOW CREATE TABLE 表名;</code></p><p>创建表：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE 表名(</span><br><span class="line">字段1 字段1类型 [COMMENT 字段1注释],</span><br><span class="line">字段2 字段2类型 [COMMENT 字段2注释],</span><br><span class="line">字段3 字段3类型 [COMMENT 字段3注释],</span><br><span class="line">...</span><br><span class="line">字段n 字段n类型 [COMMENT 字段n注释]</span><br><span class="line">)[ COMMENT 表注释 ];</span><br></pre></td></tr></table></figure><p><strong>最后一个字段后面没有逗号</strong></p><p>添加字段：<br><code>ALTER TABLE 表名 ADD 字段名 类型(长度) [COMMENT 注释] [约束];</code><br>例：<code>ALTER TABLE emp ADD nickname varchar(20) COMMENT &#39;昵称&#39;;</code></p><p>修改数据类型：<br><code>ALTER TABLE 表名 MODIFY 字段名 新数据类型(长度);</code><br>修改字段名和字段类型：<br><code>ALTER TABLE 表名 CHANGE 旧字段名 新字段名 类型(长度) [COMMENT 注释] [约束];</code><br>例：将emp表的nickname字段修改为username，类型为varchar(30)<br><code>ALTER TABLE emp CHANGE nickname username varchar(30) COMMENT &#39;昵称&#39;;</code></p><p>删除字段：<br><code>ALTER TABLE 表名 DROP 字段名;</code></p><p>修改表名：<br><code>ALTER TABLE 表名 RENAME TO 新表名</code></p><p>删除表：<br><code>DROP TABLE [IF EXISTS] 表名;</code><br>删除表，并重新创建该表：<br><code>TRUNCATE TABLE 表名;</code></p><h3 id="DML（数据操作语言）"><a href="#DML（数据操作语言）" class="headerlink" title="DML（数据操作语言）"></a>DML（数据操作语言）</h3><h4 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a>添加数据</h4><p>指定字段：<br><code>INSERT INTO 表名 (字段名1, 字段名2, ...) VALUES (值1, 值2, ...);</code><br>全部字段：<br><code>INSERT INTO 表名 VALUES (值1, 值2, ...);</code></p><p>批量添加数据：<br><code>INSERT INTO 表名 (字段名1, 字段名2, ...) VALUES (值1, 值2, ...), (值1, 值2, ...), (值1, 值2, ...);</code><br><code>INSERT INTO 表名 VALUES (值1, 值2, ...), (值1, 值2, ...), (值1, 值2, ...);</code></p><h5 id="注意事项-1"><a href="#注意事项-1" class="headerlink" title="注意事项"></a>注意事项</h5><ul><li>字符串和日期类型数据应该包含在引号中</li><li>插入的数据大小应该在字段的规定范围内</li></ul><h4 id="更新和删除数据"><a href="#更新和删除数据" class="headerlink" title="更新和删除数据"></a>更新和删除数据</h4><p>修改数据：<br><code>UPDATE 表名 SET 字段名1 = 值1, 字段名2 = 值2, ... [ WHERE 条件 ];</code><br>例：<br><code>UPDATE emp SET name = &#39;Jack&#39; WHERE id = 1;</code></p><p>删除数据：<br><code>DELETE FROM 表名 [ WHERE 条件 ];</code></p><h3 id="DQL（数据查询语言）"><a href="#DQL（数据查询语言）" class="headerlink" title="DQL（数据查询语言）"></a>DQL（数据查询语言）</h3><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT</span><br><span class="line">字段列表</span><br><span class="line">FROM</span><br><span class="line">表名字段</span><br><span class="line">WHERE</span><br><span class="line">条件列表</span><br><span class="line">GROUP BY</span><br><span class="line">分组字段列表</span><br><span class="line">HAVING</span><br><span class="line">分组后的条件列表</span><br><span class="line">ORDER BY</span><br><span class="line">排序字段列表</span><br><span class="line">LIMIT</span><br><span class="line">分页参数</span><br></pre></td></tr></table></figure><h4 id="基础查询"><a href="#基础查询" class="headerlink" title="基础查询"></a>基础查询</h4><p>查询多个字段：<br><code>SELECT 字段1, 字段2, 字段3, ... FROM 表名;</code><br><code>SELECT * FROM 表名;</code></p><p>设置别名：<br><code>SELECT 字段1 [ AS 别名1 ], 字段2 [ AS 别名2 ], 字段3 [ AS 别名3 ], ... FROM 表名;</code><br><code>SELECT 字段1 [ 别名1 ], 字段2 [ 别名2 ], 字段3 [ 别名3 ], ... FROM 表名;</code></p><p>去除重复记录：<br><code>SELECT DISTINCT 字段列表 FROM 表名;</code></p><p>转义：<br><code>SELECT * FROM 表名 WHERE name LIKE &#39;/_张三&#39; ESCAPE &#39;/&#39;</code><br>&#x2F; 之后的_不作为通配符</p><h4 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h4><p>语法：<br><code>SELECT 字段列表 FROM 表名 WHERE 条件列表;</code></p><p>条件：</p><table><thead><tr><th>比较运算符</th><th>功能</th></tr></thead><tbody><tr><td>&gt;</td><td>大于</td></tr><tr><td>&gt;&#x3D;</td><td>大于等于</td></tr><tr><td>&lt;</td><td>小于</td></tr><tr><td>&lt;&#x3D;</td><td>小于等于</td></tr><tr><td>&#x3D;</td><td>等于</td></tr><tr><td>&lt;&gt; 或 !&#x3D;</td><td>不等于</td></tr><tr><td>BETWEEN … AND …</td><td>在某个范围内（含最小、最大值）</td></tr><tr><td>IN(…)</td><td>在in之后的列表中的值，多选一</td></tr><tr><td>LIKE 占位符</td><td>模糊匹配（_匹配单个字符，%匹配任意个字符）</td></tr><tr><td>IS NULL</td><td>是NULL</td></tr></tbody></table><table><thead><tr><th>逻辑运算符</th><th>功能</th></tr></thead><tbody><tr><td>AND 或 &amp;&amp;</td><td>并且（多个条件同时成立）</td></tr><tr><td>OR 或 &amp;#124;&amp;#124;</td><td>或者（多个条件任意一个成立）</td></tr><tr><td>NOT 或 !</td><td>非，不是</td></tr></tbody></table><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 年龄等于30</span><br><span class="line">select * from employee where age = 30;</span><br><span class="line">-- 年龄小于30</span><br><span class="line">select * from employee where age &lt; 30;</span><br><span class="line">-- 小于等于</span><br><span class="line">select * from employee where age &lt;= 30;</span><br><span class="line">-- 没有身份证</span><br><span class="line">select * from employee where idcard is null or idcard = &#x27;&#x27;;</span><br><span class="line">-- 有身份证</span><br><span class="line">select * from employee where idcard;</span><br><span class="line">select * from employee where idcard is not null;</span><br><span class="line">-- 不等于</span><br><span class="line">select * from employee where age != 30;</span><br><span class="line">-- 年龄在20到30之间</span><br><span class="line">select * from employee where age between 20 and 30;</span><br><span class="line">select * from employee where age &gt;= 20 and age &lt;= 30;</span><br><span class="line">-- 下面语句不报错，但查不到任何信息</span><br><span class="line">select * from employee where age between 30 and 20;</span><br><span class="line">-- 性别为女且年龄小于30</span><br><span class="line">select * from employee where age &lt; 30 and gender = &#x27;女&#x27;;</span><br><span class="line">-- 年龄等于25或30或35</span><br><span class="line">select * from employee where age = 25 or age = 30 or age = 35;</span><br><span class="line">select * from employee where age in (25, 30, 35);</span><br><span class="line">-- 姓名为两个字</span><br><span class="line">select * from employee where name like &#x27;__&#x27;;</span><br><span class="line">-- 身份证最后为X</span><br><span class="line">select * from employee where idcard like &#x27;%X&#x27;;</span><br></pre></td></tr></table></figure><h4 id="聚合查询（聚合函数）"><a href="#聚合查询（聚合函数）" class="headerlink" title="聚合查询（聚合函数）"></a>聚合查询（聚合函数）</h4><p>常见聚合函数：</p><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>count</td><td>统计数量</td></tr><tr><td>max</td><td>最大值</td></tr><tr><td>min</td><td>最小值</td></tr><tr><td>avg</td><td>平均值</td></tr><tr><td>sum</td><td>求和</td></tr></tbody></table><p>语法：<br><code>SELECT 聚合函数(字段列表) FROM 表名;</code><br>例：<br><code>SELECT count(id) from employee where workaddress = &quot;广东省&quot;;</code></p><h4 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h4><p>语法：<br><code>SELECT 字段列表 FROM 表名 [ WHERE 条件 ] GROUP BY 分组字段名 [ HAVING 分组后的过滤条件 ];</code></p><p>where 和 having 的区别：</p><ul><li>执行时机不同：where是分组之前进行过滤，不满足where条件不参与分组；having是分组后对结果进行过滤。</li><li>判断条件不同：where不能对聚合函数进行判断，而having可以。</li></ul><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 根据性别分组，统计男性和女性数量（只显示分组数量，不显示哪个是男哪个是女）</span><br><span class="line">select count(*) from employee group by gender;</span><br><span class="line">-- 根据性别分组，统计男性和女性数量</span><br><span class="line">select gender, count(*) from employee group by gender;</span><br><span class="line">-- 根据性别分组，统计男性和女性的平均年龄</span><br><span class="line">select gender, avg(age) from employee group by gender;</span><br><span class="line">-- 年龄小于45，并根据工作地址分组</span><br><span class="line">select workaddress, count(*) from employee where age &lt; 45 group by workaddress;</span><br><span class="line">-- 年龄小于45，并根据工作地址分组，获取员工数量大于等于3的工作地址</span><br><span class="line">select workaddress, count(*) address_count from employee where age &lt; 45 group by workaddress having address_count &gt;= 3;</span><br></pre></td></tr></table></figure><h5 id="注意事项-2"><a href="#注意事项-2" class="headerlink" title="注意事项"></a>注意事项</h5><ul><li>执行顺序：where &gt; 聚合函数 &gt; having</li><li>分组之后，查询的字段一般为聚合函数和分组字段，查询其他字段无任何意义</li></ul><h4 id="排序查询"><a href="#排序查询" class="headerlink" title="排序查询"></a>排序查询</h4><p>语法：<br><code>SELECT 字段列表 FROM 表名 ORDER BY 字段1 排序方式1, 字段2 排序方式2;</code></p><p>排序方式：</p><ul><li>ASC: 升序（默认）</li><li>DESC: 降序</li></ul><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 根据年龄升序排序</span><br><span class="line">SELECT * FROM employee ORDER BY age ASC;</span><br><span class="line">SELECT * FROM employee ORDER BY age;</span><br><span class="line">-- 两字段排序，根据年龄升序排序，入职时间降序排序</span><br><span class="line">SELECT * FROM employee ORDER BY age ASC, entrydate DESC;</span><br></pre></td></tr></table></figure><h5 id="注意事项-3"><a href="#注意事项-3" class="headerlink" title="注意事项"></a>注意事项</h5><p>如果是多字段排序，当第一个字段值相同时，才会根据第二个字段进行排序</p><h4 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h4><p>语法：<br><code>SELECT 字段列表 FROM 表名 LIMIT 起始索引, 查询记录数;</code></p><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 查询第一页数据，展示10条</span><br><span class="line">SELECT * FROM employee LIMIT 0, 10;</span><br><span class="line">-- 查询第二页</span><br><span class="line">SELECT * FROM employee LIMIT 10, 10;</span><br></pre></td></tr></table></figure><h5 id="注意事项-4"><a href="#注意事项-4" class="headerlink" title="注意事项"></a>注意事项</h5><ul><li>起始索引从0开始，起始索引 &#x3D; （查询页码 - 1） * 每页显示记录数</li><li>分页查询是数据库的方言，不同数据库有不同实现，MySQL是LIMIT</li><li>如果查询的是第一页数据，起始索引可以省略，直接简写 LIMIT 10</li></ul><h4 id="DQL执行顺序"><a href="#DQL执行顺序" class="headerlink" title="DQL执行顺序"></a>DQL执行顺序</h4><p>FROM -&gt; WHERE -&gt; GROUP BY -&gt; SELECT -&gt; ORDER BY -&gt; LIMIT</p><h3 id="DCL"><a href="#DCL" class="headerlink" title="DCL"></a>DCL</h3><h4 id="管理用户"><a href="#管理用户" class="headerlink" title="管理用户"></a>管理用户</h4><p>查询用户：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">USE mysql;</span><br><span class="line">SELECT * FROM user;</span><br></pre></td></tr></table></figure><p>创建用户:<br><code>CREATE USER &#39;用户名&#39;@&#39;主机名&#39; IDENTIFIED BY &#39;密码&#39;;</code></p><p>修改用户密码：<br><code>ALTER USER &#39;用户名&#39;@&#39;主机名&#39; IDENTIFIED WITH mysql_native_password BY &#39;新密码&#39;;</code></p><p>删除用户：<br><code>DROP USER &#39;用户名&#39;@&#39;主机名&#39;;</code></p><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 创建用户test，只能在当前主机localhost访问</span><br><span class="line">create user &#x27;test&#x27;@&#x27;localhost&#x27; identified by &#x27;123456&#x27;;</span><br><span class="line">-- 创建用户test，能在任意主机访问</span><br><span class="line">create user &#x27;test&#x27;@&#x27;%&#x27; identified by &#x27;123456&#x27;;</span><br><span class="line">create user &#x27;test&#x27; identified by &#x27;123456&#x27;;</span><br><span class="line">-- 修改密码</span><br><span class="line">alter user &#x27;test&#x27;@&#x27;localhost&#x27; identified with mysql_native_password by &#x27;1234&#x27;;</span><br><span class="line">-- 删除用户</span><br><span class="line">drop user &#x27;test&#x27;@&#x27;localhost&#x27;;</span><br></pre></td></tr></table></figure><h5 id="注意事项-5"><a href="#注意事项-5" class="headerlink" title="注意事项"></a>注意事项</h5><ul><li>主机名可以使用 % 通配</li></ul><h4 id="权限控制"><a href="#权限控制" class="headerlink" title="权限控制"></a>权限控制</h4><p>常用权限：</p><table><thead><tr><th>权限</th><th>说明</th></tr></thead><tbody><tr><td>ALL, ALL PRIVILEGES</td><td>所有权限</td></tr><tr><td>SELECT</td><td>查询数据</td></tr><tr><td>INSERT</td><td>插入数据</td></tr><tr><td>UPDATE</td><td>修改数据</td></tr><tr><td>DELETE</td><td>删除数据</td></tr><tr><td>ALTER</td><td>修改表</td></tr><tr><td>DROP</td><td>删除数据库&#x2F;表&#x2F;视图</td></tr><tr><td>CREATE</td><td>创建数据库&#x2F;表</td></tr></tbody></table><p>更多权限请看<a href="#%E6%9D%83%E9%99%90%E4%B8%80%E8%A7%88%E8%A1%A8" title="权限一览表">权限一览表</a></p><p>查询权限：<br><code>SHOW GRANTS FOR &#39;用户名&#39;@&#39;主机名&#39;;</code></p><p>授予权限：<br><code>GRANT 权限列表 ON 数据库名.表名 TO &#39;用户名&#39;@&#39;主机名&#39;;</code></p><p>撤销权限：<br><code>REVOKE 权限列表 ON 数据库名.表名 FROM &#39;用户名&#39;@&#39;主机名&#39;;</code></p><h5 id="注意事项-6"><a href="#注意事项-6" class="headerlink" title="注意事项"></a>注意事项</h5><ul><li>多个权限用逗号分隔</li><li>授权时，数据库名和表名可以用 * 进行通配，代表所有</li></ul><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><ul><li>字符串函数</li><li>数值函数</li><li>日期函数</li><li>流程函数</li></ul><h3 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h3><p>常用函数：</p><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>CONCAT(s1, s2, …, sn)</td><td>字符串拼接，将s1, s2, …, sn拼接成一个字符串</td></tr><tr><td>LOWER(str)</td><td>将字符串全部转为小写</td></tr><tr><td>UPPER(str)</td><td>将字符串全部转为大写</td></tr><tr><td>LPAD(str, n, pad)</td><td>左填充，用字符串pad对str的左边进行填充，达到n个字符串长度</td></tr><tr><td>RPAD(str, n, pad)</td><td>右填充，用字符串pad对str的右边进行填充，达到n个字符串长度</td></tr><tr><td>TRIM(str)</td><td>去掉字符串头部和尾部的空格</td></tr><tr><td>SUBSTRING(str, start, len)</td><td>返回从字符串str从start位置起的len个长度的字符串</td></tr><tr><td>REPLACE(column, source, replace)</td><td>替换字符串</td></tr></tbody></table><p>使用示例：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 拼接</span><br><span class="line">SELECT CONCAT(&#x27;Hello&#x27;, &#x27;World&#x27;);</span><br><span class="line">-- 小写</span><br><span class="line">SELECT LOWER(&#x27;Hello&#x27;);</span><br><span class="line">-- 大写</span><br><span class="line">SELECT UPPER(&#x27;Hello&#x27;);</span><br><span class="line">-- 左填充</span><br><span class="line">SELECT LPAD(&#x27;01&#x27;, 5, &#x27;-&#x27;);</span><br><span class="line">-- 右填充</span><br><span class="line">SELECT RPAD(&#x27;01&#x27;, 5, &#x27;-&#x27;);</span><br><span class="line">-- 去除空格</span><br><span class="line">SELECT TRIM(&#x27; Hello World &#x27;);</span><br><span class="line">-- 切片（起始索引为1）</span><br><span class="line">SELECT SUBSTRING(&#x27;Hello World&#x27;, 1, 5);</span><br></pre></td></tr></table></figure><h3 id="数值函数"><a href="#数值函数" class="headerlink" title="数值函数"></a>数值函数</h3><p>常见函数：</p><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>CEIL(x)</td><td>向上取整</td></tr><tr><td>FLOOR(x)</td><td>向下取整</td></tr><tr><td>MOD(x, y)</td><td>返回x&#x2F;y的模</td></tr><tr><td>RAND()</td><td>返回0~1内的随机数</td></tr><tr><td>ROUND(x, y)</td><td>求参数x的四舍五入值，保留y位小数</td></tr></tbody></table><h3 id="日期函数"><a href="#日期函数" class="headerlink" title="日期函数"></a>日期函数</h3><p>常用函数：</p><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>CURDATE()</td><td>返回当前日期</td></tr><tr><td>CURTIME()</td><td>返回当前时间</td></tr><tr><td>NOW()</td><td>返回当前日期和时间</td></tr><tr><td>YEAR(date)</td><td>获取指定date的年份</td></tr><tr><td>MONTH(date)</td><td>获取指定date的月份</td></tr><tr><td>DAY(date)</td><td>获取指定date的日期</td></tr><tr><td>DATE_ADD(date, INTERVAL expr type)</td><td>返回一个日期&#x2F;时间值加上一个时间间隔expr后的时间值</td></tr><tr><td>DATEDIFF(date1, date2)</td><td>返回起始时间date1和结束时间date2之间的天数</td></tr></tbody></table><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- DATE_ADD</span><br><span class="line">SELECT DATE_ADD(NOW(), INTERVAL 70 YEAR);</span><br></pre></td></tr></table></figure><h3 id="流程函数"><a href="#流程函数" class="headerlink" title="流程函数"></a>流程函数</h3><p>常用函数：</p><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>IF(value, t, f)</td><td>如果value为true，则返回t，否则返回f</td></tr><tr><td>IFNULL(value1, value2)</td><td>如果value1不为空，返回value1，否则返回value2</td></tr><tr><td>CASE WHEN [ val1 ] THEN [ res1 ] … ELSE [ default ] END</td><td>如果val1为true，返回res1，… 否则返回default默认值</td></tr><tr><td>CASE [ expr ] WHEN [ val1 ] THEN [ res1 ] … ELSE [ default ] END</td><td>如果expr的值等于val1，返回res1，… 否则返回default默认值</td></tr></tbody></table><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select</span><br><span class="line">name,</span><br><span class="line">(case when age &gt; 30 then &#x27;中年&#x27; else &#x27;青年&#x27; end)</span><br><span class="line">from employee;</span><br><span class="line">select</span><br><span class="line">name,</span><br><span class="line">(case workaddress when &#x27;北京市&#x27; then &#x27;一线城市&#x27; when &#x27;上海市&#x27; then &#x27;一线城市&#x27; else &#x27;二线城市&#x27; end) as &#x27;工作地址&#x27;</span><br><span class="line">from employee;</span><br></pre></td></tr></table></figure><h2 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h2><p>分类：</p><table><thead><tr><th>约束</th><th>描述</th><th>关键字</th></tr></thead><tbody><tr><td>非空约束</td><td>限制该字段的数据不能为null</td><td>NOT NULL</td></tr><tr><td>唯一约束</td><td>保证该字段的所有数据都是唯一、不重复的</td><td>UNIQUE</td></tr><tr><td>主键约束</td><td>主键是一行数据的唯一标识，要求非空且唯一</td><td>PRIMARY KEY</td></tr><tr><td>默认约束</td><td>保存数据时，如果未指定该字段的值，则采用默认值</td><td>DEFAULT</td></tr><tr><td>检查约束（8.0.1版本后）</td><td>保证字段值满足某一个条件</td><td>CHECK</td></tr><tr><td>外键约束</td><td>用来让两张图的数据之间建立连接，保证数据的一致性和完整性</td><td>FOREIGN KEY</td></tr></tbody></table><p>约束是作用于表中字段上的，可以再创建表&#x2F;修改表的时候添加约束。</p><h3 id="常用约束"><a href="#常用约束" class="headerlink" title="常用约束"></a>常用约束</h3><table><thead><tr><th>约束条件</th><th>关键字</th></tr></thead><tbody><tr><td>主键</td><td>PRIMARY KEY</td></tr><tr><td>自动增长</td><td>AUTO_INCREMENT</td></tr><tr><td>不为空</td><td>NOT NULL</td></tr><tr><td>唯一</td><td>UNIQUE</td></tr><tr><td>逻辑条件</td><td>CHECK</td></tr><tr><td>默认值</td><td>DEFAULT</td></tr></tbody></table><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create table user(</span><br><span class="line">id int primary key auto_increment,</span><br><span class="line">name varchar(10) not null unique,</span><br><span class="line">age int check(age &gt; 0 and age &lt; 120),</span><br><span class="line">status char(1) default &#x27;1&#x27;,</span><br><span class="line">gender char(1)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="外键约束"><a href="#外键约束" class="headerlink" title="外键约束"></a>外键约束</h3><p>添加外键：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE 表名(</span><br><span class="line">字段名 字段类型,</span><br><span class="line">...</span><br><span class="line">[CONSTRAINT] [外键名称] FOREIGN KEY(外键字段名) REFERENCES 主表(主表列名)</span><br><span class="line">);</span><br><span class="line">ALTER TABLE 表名 ADD CONSTRAINT 外键名称 FOREIGN KEY (外键字段名) REFERENCES 主表(主表列名);</span><br><span class="line"></span><br><span class="line">-- 例子</span><br><span class="line">alter table emp add constraint fk_emp_dept_id foreign key(dept_id) references dept(id);</span><br></pre></td></tr></table></figure><p>删除外键：<br><code>ALTER TABLE 表名 DROP FOREIGN KEY 外键名;</code></p><h4 id="删除-x2F-更新行为"><a href="#删除-x2F-更新行为" class="headerlink" title="删除&#x2F;更新行为"></a>删除&#x2F;更新行为</h4><table><thead><tr><th>行为</th><th>说明</th></tr></thead><tbody><tr><td>NO ACTION</td><td>当在父表中删除&#x2F;更新对应记录时，首先检查该记录是否有对应外键，如果有则不允许删除&#x2F;更新（与RESTRICT一致）</td></tr><tr><td>RESTRICT</td><td>当在父表中删除&#x2F;更新对应记录时，首先检查该记录是否有对应外键，如果有则不允许删除&#x2F;更新（与NO ACTION一致）</td></tr><tr><td>CASCADE</td><td>当在父表中删除&#x2F;更新对应记录时，首先检查该记录是否有对应外键，如果有则也删除&#x2F;更新外键在子表中的记录</td></tr><tr><td>SET NULL</td><td>当在父表中删除&#x2F;更新对应记录时，首先检查该记录是否有对应外键，如果有则设置子表中该外键值为null（要求该外键允许为null）</td></tr><tr><td>SET DEFAULT</td><td>父表有变更时，子表将外键设为一个默认值（Innodb不支持）</td></tr></tbody></table><p>更改删除&#x2F;更新行为：<br><code>ALTER TABLE 表名 ADD CONSTRAINT 外键名称 FOREIGN KEY (外键字段) REFERENCES 主表名(主表字段名) ON UPDATE 行为 ON DELETE 行为;</code></p><h2 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h2><h3 id="多表关系"><a href="#多表关系" class="headerlink" title="多表关系"></a>多表关系</h3><ul><li>一对多（多对一）</li><li>多对多</li><li>一对一</li></ul><h4 id="一对多"><a href="#一对多" class="headerlink" title="一对多"></a>一对多</h4><p>案例：部门与员工<br>关系：一个部门对应多个员工，一个员工对应一个部门<br>实现：在多的一方建立外键，指向一的一方的主键</p><h4 id="多对多"><a href="#多对多" class="headerlink" title="多对多"></a>多对多</h4><p>案例：学生与课程<br>关系：一个学生可以选多门课程，一门课程也可以供多个学生选修<br>实现：建立第三张中间表，中间表至少包含两个外键，分别关联两方主键</p><h4 id="一对一"><a href="#一对一" class="headerlink" title="一对一"></a>一对一</h4><p>案例：用户与用户详情<br>关系：一对一关系，多用于单表拆分，将一张表的基础字段放在一张表中，其他详情字段放在另一张表中，以提升操作效率<br>实现：在任意一方加入外键，关联另外一方的主键，并且设置外键为唯一的（UNIQUE）</p><h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><p>合并查询（笛卡尔积，会展示所有组合结果）：<br><code>select * from employee, dept;</code></p><blockquote><p>笛卡尔积：两个集合A集合和B集合的所有组合情况（在多表查询时，需要消除无效的笛卡尔积）</p></blockquote><p>消除无效笛卡尔积：<br><code>select * from employee, dept where employee.dept = dept.id;</code></p><h3 id="内连接查询"><a href="#内连接查询" class="headerlink" title="内连接查询"></a>内连接查询</h3><p>内连接查询的是两张表交集的部分</p><p>隐式内连接：<br><code>SELECT 字段列表 FROM 表1, 表2 WHERE 条件 ...;</code></p><p>显式内连接：<br><code>SELECT 字段列表 FROM 表1 [ INNER ] JOIN 表2 ON 连接条件 ...;</code></p><p>显式性能比隐式高</p><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 查询员工姓名，及关联的部门的名称</span><br><span class="line">-- 隐式</span><br><span class="line">select e.name, d.name from employee as e, dept as d where e.dept = d.id;</span><br><span class="line">-- 显式</span><br><span class="line">select e.name, d.name from employee as e inner join dept as d on e.dept = d.id;</span><br></pre></td></tr></table></figure><h3 id="外连接查询"><a href="#外连接查询" class="headerlink" title="外连接查询"></a>外连接查询</h3><p>左外连接：<br>查询左表所有数据，以及两张表交集部分数据<br><code>SELECT 字段列表 FROM 表1 LEFT [ OUTER ] JOIN 表2 ON 条件 ...;</code><br>相当于查询表1的所有数据，包含表1和表2交集部分数据</p><p>右外连接：<br>查询右表所有数据，以及两张表交集部分数据<br><code>SELECT 字段列表 FROM 表1 RIGHT [ OUTER ] JOIN 表2 ON 条件 ...;</code></p><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 左</span><br><span class="line">select e.*, d.name from employee as e left outer join dept as d on e.dept = d.id;</span><br><span class="line">select d.name, e.* from dept d left outer join emp e on e.dept = d.id;  -- 这条语句与下面的语句效果一样</span><br><span class="line">-- 右</span><br><span class="line">select d.name, e.* from employee as e right outer join dept as d on e.dept = d.id;</span><br></pre></td></tr></table></figure><p>左连接可以查询到没有dept的employee，右连接可以查询到没有employee的dept</p><h3 id="自连接查询"><a href="#自连接查询" class="headerlink" title="自连接查询"></a>自连接查询</h3><p>当前表与自身的连接查询，自连接必须使用表别名</p><p>语法：<br><code>SELECT 字段列表 FROM 表A 别名A JOIN 表A 别名B ON 条件 ...;</code></p><p>自连接查询，可以是内连接查询，也可以是外连接查询</p><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 查询员工及其所属领导的名字</span><br><span class="line">select a.name, b.name from employee a, employee b where a.manager = b.id;</span><br><span class="line">-- 没有领导的也查询出来</span><br><span class="line">select a.name, b.name from employee a left join employee b on a.manager = b.id;</span><br></pre></td></tr></table></figure><h3 id="联合查询-union-union-all"><a href="#联合查询-union-union-all" class="headerlink" title="联合查询 union, union all"></a>联合查询 union, union all</h3><p>把多次查询的结果合并，形成一个新的查询集</p><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT 字段列表 FROM 表A ...</span><br><span class="line">UNION [ALL]</span><br><span class="line">SELECT 字段列表 FROM 表B ...</span><br></pre></td></tr></table></figure><h4 id="注意事项-7"><a href="#注意事项-7" class="headerlink" title="注意事项"></a>注意事项</h4><ul><li>UNION ALL 会有重复结果，UNION 不会</li><li>联合查询比使用or效率高，不会使索引失效</li></ul><h3 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h3><p>SQL语句中嵌套SELECT语句，称谓嵌套查询，又称子查询。<br><code>SELECT * FROM t1 WHERE column1 = ( SELECT column1 FROM t2);</code><br><strong>子查询外部的语句可以是 INSERT &#x2F; UPDATE &#x2F; DELETE &#x2F; SELECT 的任何一个</strong></p><p>根据子查询结果可以分为：</p><ul><li>标量子查询（子查询结果为单个值）</li><li>列子查询（子查询结果为一列）</li><li>行子查询（子查询结果为一行）</li><li>表子查询（子查询结果为多行多列）</li></ul><p>根据子查询位置可分为：</p><ul><li>WHERE 之后</li><li>FROM 之后</li><li>SELECT 之后</li></ul><h4 id="标量子查询"><a href="#标量子查询" class="headerlink" title="标量子查询"></a>标量子查询</h4><p>子查询返回的结果是单个值（数字、字符串、日期等）。<br>常用操作符：- &lt; &gt; &gt; &gt;&#x3D; &lt; &lt;&#x3D;</p><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 查询销售部所有员工</span><br><span class="line">select id from dept where name = &#x27;销售部&#x27;;</span><br><span class="line">-- 根据销售部部门ID，查询员工信息</span><br><span class="line">select * from employee where dept = 4;</span><br><span class="line">-- 合并（子查询）</span><br><span class="line">select * from employee where dept = (select id from dept where name = &#x27;销售部&#x27;);</span><br><span class="line"></span><br><span class="line">-- 查询xxx入职之后的员工信息</span><br><span class="line">select * from employee where entrydate &gt; (select entrydate from employee where name = &#x27;xxx&#x27;);</span><br></pre></td></tr></table></figure><h4 id="列子查询"><a href="#列子查询" class="headerlink" title="列子查询"></a>列子查询</h4><p>返回的结果是一列（可以是多行）。</p><p>常用操作符：</p><table><thead><tr><th>操作符</th><th>描述</th></tr></thead><tbody><tr><td>IN</td><td>在指定的集合范围内，多选一</td></tr><tr><td>NOT IN</td><td>不在指定的集合范围内</td></tr><tr><td>ANY</td><td>子查询返回列表中，有任意一个满足即可</td></tr><tr><td>SOME</td><td>与ANY等同，使用SOME的地方都可以使用ANY</td></tr><tr><td>ALL</td><td>子查询返回列表的所有值都必须满足</td></tr></tbody></table><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 查询销售部和市场部的所有员工信息</span><br><span class="line">select * from employee where dept in (select id from dept where name = &#x27;销售部&#x27; or name = &#x27;市场部&#x27;);</span><br><span class="line">-- 查询比财务部所有人工资都高的员工信息</span><br><span class="line">select * from employee where salary &gt; all(select salary from employee where dept = (select id from dept where name = &#x27;财务部&#x27;));</span><br><span class="line">-- 查询比研发部任意一人工资高的员工信息</span><br><span class="line">select * from employee where salary &gt; any (select salary from employee where dept = (select id from dept where name = &#x27;研发部&#x27;));</span><br></pre></td></tr></table></figure><h4 id="行子查询"><a href="#行子查询" class="headerlink" title="行子查询"></a>行子查询</h4><p>返回的结果是一行（可以是多列）。<br>常用操作符：&#x3D;, &lt;, &gt;, IN, NOT IN</p><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 查询与xxx的薪资及直属领导相同的员工信息</span><br><span class="line">select * from employee where (salary, manager) = (12500, 1);</span><br><span class="line">select * from employee where (salary, manager) = (select salary, manager from employee where name = &#x27;xxx&#x27;);</span><br></pre></td></tr></table></figure><h4 id="表子查询"><a href="#表子查询" class="headerlink" title="表子查询"></a>表子查询</h4><p>返回的结果是多行多列<br>常用操作符：IN</p><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 查询与xxx1，xxx2的职位和薪资相同的员工</span><br><span class="line">select * from employee where (job, salary) in (select job, salary from employee where name = &#x27;xxx1&#x27; or name = &#x27;xxx2&#x27;);</span><br><span class="line">-- 查询入职日期是2006-01-01之后的员工，及其部门信息</span><br><span class="line">select e.*, d.* from (select * from employee where entrydate &gt; &#x27;2006-01-01&#x27;) as e left join dept as d on e.dept = d.id;</span><br></pre></td></tr></table></figure><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><p>事务是一组操作的集合，事务会把所有操作作为一个整体一起向系统提交或撤销操作请求，即这些操作要么同时成功，要么同时失败。</p><p>基本操作：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 1. 查询张三账户余额</span><br><span class="line">select * from account where name = &#x27;张三&#x27;;</span><br><span class="line">-- 2. 将张三账户余额-1000</span><br><span class="line">update account set money = money - 1000 where name = &#x27;张三&#x27;;</span><br><span class="line">-- 此语句出错后张三钱减少但是李四钱没有增加</span><br><span class="line">模拟sql语句错误</span><br><span class="line">-- 3. 将李四账户余额+1000</span><br><span class="line">update account set money = money + 1000 where name = &#x27;李四&#x27;;</span><br><span class="line"></span><br><span class="line">-- 查看事务提交方式</span><br><span class="line">SELECT @@AUTOCOMMIT;</span><br><span class="line">-- 设置事务提交方式，1为自动提交，0为手动提交，该设置只对当前会话有效</span><br><span class="line">SET @@AUTOCOMMIT = 0;</span><br><span class="line">-- 提交事务</span><br><span class="line">COMMIT;</span><br><span class="line">-- 回滚事务</span><br><span class="line">ROLLBACK;</span><br><span class="line"></span><br><span class="line">-- 设置手动提交后上面代码改为：</span><br><span class="line">select * from account where name = &#x27;张三&#x27;;</span><br><span class="line">update account set money = money - 1000 where name = &#x27;张三&#x27;;</span><br><span class="line">update account set money = money + 1000 where name = &#x27;李四&#x27;;</span><br><span class="line">commit;</span><br></pre></td></tr></table></figure><p>操作方式二：</p><p>开启事务：<br><code>START TRANSACTION 或 BEGIN TRANSACTION;</code><br>提交事务：<br><code>COMMIT;</code><br>回滚事务：<br><code>ROLLBACK;</code></p><p>操作实例：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">start transaction;</span><br><span class="line">select * from account where name = &#x27;张三&#x27;;</span><br><span class="line">update account set money = money - 1000 where name = &#x27;张三&#x27;;</span><br><span class="line">update account set money = money + 1000 where name = &#x27;李四&#x27;;</span><br><span class="line">commit;</span><br></pre></td></tr></table></figure><h3 id="四大特性ACID"><a href="#四大特性ACID" class="headerlink" title="四大特性ACID"></a>四大特性ACID</h3><ul><li>原子性(Atomicity)：事务是不可分割的最小操作但愿，要么全部成功，要么全部失败</li><li>一致性(Consistency)：事务完成时，必须使所有数据都保持一致状态</li><li>隔离性(Isolation)：数据库系统提供的隔离机制，保证事务在不受外部并发操作影响的独立环境下运行</li><li>持久性(Durability)：事务一旦提交或回滚，它对数据库中的数据的改变就是永久的</li></ul><h3 id="并发事务"><a href="#并发事务" class="headerlink" title="并发事务"></a>并发事务</h3><table><thead><tr><th>问题</th><th>描述</th></tr></thead><tbody><tr><td>脏读</td><td>一个事务读到另一个事务还没提交的数据</td></tr><tr><td>不可重复读</td><td>一个事务先后读取同一条记录，但两次读取的数据不同</td></tr><tr><td>幻读</td><td>一个事务按照条件查询数据时，没有对应的数据行，但是再插入数据时，又发现这行数据已经存在</td></tr></tbody></table><blockquote><p>这三个问题的详细演示：<a href="https://www.bilibili.com/video/BV1Kr4y1i7ru?p=55cd">https://www.bilibili.com/video/BV1Kr4y1i7ru?p=55cd</a> </p></blockquote><p>并发事务隔离级别：</p><table><thead><tr><th>隔离级别</th><th>脏读</th><th>不可重复读</th><th>幻读</th></tr></thead><tbody><tr><td>Read uncommitted</td><td>√</td><td>√</td><td>√</td></tr><tr><td>Read committed</td><td>×</td><td>√</td><td>√</td></tr><tr><td>Repeatable Read(默认)</td><td>×</td><td>×</td><td>√</td></tr><tr><td>Serializable</td><td>×</td><td>×</td><td>×</td></tr></tbody></table><ul><li>√表示在当前隔离级别下该问题会出现</li><li>Serializable 性能最低；Read uncommitted 性能最高，数据安全性最差</li></ul><p>查看事务隔离级别：<br><code>SELECT @@TRANSACTION_ISOLATION;</code><br>设置事务隔离级别：<br><code>SET [ SESSION | GLOBAL ] TRANSACTION ISOLATION LEVEL &#123;READ UNCOMMITTED | READ COMMITTED | REPEATABLE READ | SERIALIZABLE &#125;;</code><br>SESSION 是会话级别，表示只针对当前会话有效，GLOBAL 表示对所有会话有效</p><h1 id="进阶篇"><a href="#进阶篇" class="headerlink" title="进阶篇"></a>进阶篇</h1><h2 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h2><p>MySQL体系结构：</p><p><img src="https://dhc.pythonanywhere.com/media/editor/MySQL%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84_20220315034329549927.png" alt="结构图" title="结构图"><br><img src="https://dhc.pythonanywhere.com/media/editor/MySQL%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E5%B1%82%E7%BA%A7%E5%90%AB%E4%B9%89_20220315034359342837.png" alt="层级描述" title="层级描述"></p><p>存储引擎就是存储数据、建立索引、更新&#x2F;查询数据等技术的实现方式。存储引擎是基于表而不是基于库的，所以存储引擎也可以被称为表引擎。<br>默认存储引擎是InnoDB。</p><p>相关操作：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 查询建表语句</span><br><span class="line">show create table account;</span><br><span class="line">-- 建表时指定存储引擎</span><br><span class="line">CREATE TABLE 表名(</span><br><span class="line">...</span><br><span class="line">) ENGINE=INNODB;</span><br><span class="line">-- 查看当前数据库支持的存储引擎</span><br><span class="line">show engines;</span><br></pre></td></tr></table></figure><h3 id="InnoDB"><a href="#InnoDB" class="headerlink" title="InnoDB"></a>InnoDB</h3><p>InnoDB 是一种兼顾高可靠性和高性能的通用存储引擎，在 MySQL 5.5 之后，InnoDB 是默认的 MySQL 引擎。</p><p>特点：</p><ul><li>DML 操作遵循 ACID 模型，支持<strong>事务</strong></li><li><strong>行级锁</strong>，提高并发访问性能</li><li>支持<strong>外键</strong>约束，保证数据的完整性和正确性</li></ul><p>文件：</p><ul><li>xxx.ibd: xxx代表表名，InnoDB 引擎的每张表都会对应这样一个表空间文件，存储该表的表结构（frm、sdi）、数据和索引。</li></ul><p>参数：innodb_file_per_table，决定多张表共享一个表空间还是每张表对应一个表空间</p><p>知识点：</p><p>查看 Mysql 变量：<br><code>show variables like &#39;innodb_file_per_table&#39;;</code></p><p>从idb文件提取表结构数据：<br>（在cmd运行）<br><code>ibd2sdi xxx.ibd</code></p><p>InnoDB 逻辑存储结构：<br><img src="https://dhc.pythonanywhere.com/media/editor/%E9%80%BB%E8%BE%91%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84_20220316030616590001.png" alt="InnoDB逻辑存储结构" title="InnoDB逻辑存储结构"></p><h3 id="MyISAM"><a href="#MyISAM" class="headerlink" title="MyISAM"></a>MyISAM</h3><p>MyISAM 是 MySQL 早期的默认存储引擎。</p><p>特点：</p><ul><li>不支持事务，不支持外键</li><li>支持表锁，不支持行锁</li><li>访问速度快</li></ul><p>文件：</p><ul><li>xxx.sdi: 存储表结构信息</li><li>xxx.MYD: 存储数据</li><li>xxx.MYI: 存储索引</li></ul><h3 id="Memory"><a href="#Memory" class="headerlink" title="Memory"></a>Memory</h3><p>Memory 引擎的表数据是存储在内存中的，受硬件问题、断电问题的影响，只能将这些表作为临时表或缓存使用。</p><p>特点：</p><ul><li>存放在内存中，速度快</li><li>hash索引（默认）</li></ul><p>文件：</p><ul><li>xxx.sdi: 存储表结构信息</li></ul><h3 id="存储引擎特点"><a href="#存储引擎特点" class="headerlink" title="存储引擎特点"></a>存储引擎特点</h3><table><thead><tr><th>特点</th><th>InnoDB</th><th>MyISAM</th><th>Memory</th></tr></thead><tbody><tr><td>存储限制</td><td>64TB</td><td>有</td><td>有</td></tr><tr><td>事务安全</td><td>支持</td><td>-</td><td>-</td></tr><tr><td>锁机制</td><td>行锁</td><td>表锁</td><td>表锁</td></tr><tr><td>B+tree索引</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>Hash索引</td><td>-</td><td>-</td><td>支持</td></tr><tr><td>全文索引</td><td>支持（5.6版本之后）</td><td>支持</td><td>-</td></tr><tr><td>空间使用</td><td>高</td><td>低</td><td>N&#x2F;A</td></tr><tr><td>内存使用</td><td>高</td><td>低</td><td>中等</td></tr><tr><td>批量插入速度</td><td>低</td><td>高</td><td>高</td></tr><tr><td>支持外键</td><td>支持</td><td>-</td><td>-</td></tr></tbody></table><h3 id="存储引擎的选择"><a href="#存储引擎的选择" class="headerlink" title="存储引擎的选择"></a>存储引擎的选择</h3><p>在选择存储引擎时，应该根据应用系统的特点选择合适的存储引擎。对于复杂的应用系统，还可以根据实际情况选择多种存储引擎进行组合。</p><ul><li>InnoDB: 如果应用对事物的完整性有比较高的要求，在并发条件下要求数据的一致性，数据操作除了插入和查询之外，还包含很多的更新、删除操作，则 InnoDB 是比较合适的选择</li><li>MyISAM: 如果应用是以读操作和插入操作为主，只有很少的更新和删除操作，并且对事务的完整性、并发性要求不高，那这个存储引擎是非常合适的。</li><li>Memory: 将所有数据保存在内存中，访问速度快，通常用于临时表及缓存。Memory 的缺陷是对表的大小有限制，太大的表无法缓存在内存中，而且无法保障数据的安全性</li></ul><p>电商中的足迹和评论适合使用 MyISAM 引擎，缓存适合使用 Memory 引擎。</p><h2 id="性能分析"><a href="#性能分析" class="headerlink" title="性能分析"></a>性能分析</h2><h3 id="查看执行频次"><a href="#查看执行频次" class="headerlink" title="查看执行频次"></a>查看执行频次</h3><p>查看当前数据库的 INSERT, UPDATE, DELETE, SELECT 访问频次：<br><code>SHOW GLOBAL STATUS LIKE &#39;Com_______&#39;;</code> 或者 <code>SHOW SESSION STATUS LIKE &#39;Com_______&#39;;</code><br>例：<code>show global status like &#39;Com_______&#39;</code></p><h3 id="慢查询日志"><a href="#慢查询日志" class="headerlink" title="慢查询日志"></a>慢查询日志</h3><p>慢查询日志记录了所有执行时间超过指定参数（long_query_time，单位：秒，默认10秒）的所有SQL语句的日志。<br>MySQL的慢查询日志默认没有开启，需要在MySQL的配置文件（&#x2F;etc&#x2F;my.cnf）中配置如下信息：<br>    # 开启慢查询日志开关<br>    slow_query_log&#x3D;1<br>    # 设置慢查询日志的时间为2秒，SQL语句执行时间超过2秒，就会视为慢查询，记录慢查询日志<br>    long_query_time&#x3D;2<br>更改后记得重启MySQL服务，日志文件位置：&#x2F;var&#x2F;lib&#x2F;mysql&#x2F;localhost-slow.log</p><p>查看慢查询日志开关状态：<br><code>show variables like &#39;slow_query_log&#39;;</code></p><h3 id="profile"><a href="#profile" class="headerlink" title="profile"></a>profile</h3><p>show profile 能在做SQL优化时帮我们了解时间都耗费在哪里。通过 have_profiling 参数，能看到当前 MySQL 是否支持 profile 操作：<br><code>SELECT @@have_profiling;</code><br>profiling 默认关闭，可以通过set语句在session&#x2F;global级别开启 profiling：<br><code>SET profiling = 1;</code><br>查看所有语句的耗时：<br><code>show profiles;</code><br>查看指定query_id的SQL语句各个阶段的耗时：<br><code>show profile for query query_id;</code><br>查看指定query_id的SQL语句CPU的使用情况<br><code>show profile cpu for query query_id;</code></p><h3 id="explain"><a href="#explain" class="headerlink" title="explain"></a>explain</h3><p>EXPLAIN 或者 DESC 命令获取 MySQL 如何执行 SELECT 语句的信息，包括在 SELECT 语句执行过程中表如何连接和连接的顺序。<br>语法：<br>    # 直接在select语句之前加上关键字 explain &#x2F; desc<br>    EXPLAIN SELECT 字段列表 FROM 表名 HWERE 条件;</p><p>EXPLAIN 各字段含义：</p><ul><li>id：select 查询的序列号，表示查询中执行 select 子句或者操作表的顺序（id相同，执行顺序从上到下；id不同，值越大越先执行）</li><li>select_type：表示 SELECT 的类型，常见取值有 SIMPLE（简单表，即不适用表连接或者子查询）、PRIMARY（主查询，即外层的查询）、UNION（UNION中的第二个或者后面的查询语句）、SUBQUERY（SELECT&#x2F;WHERE之后包含了子查询）等</li><li>type：表示连接类型，性能由好到差的连接类型为 NULL、system、const、eq_ref、ref、range、index、all</li><li>possible_key：可能应用在这张表上的索引，一个或多个</li><li>Key：实际使用的索引，如果为 NULL，则没有使用索引</li><li>Key_len：表示索引中使用的字节数，该值为索引字段最大可能长度，并非实际使用长度，在不损失精确性的前提下，长度越短越好</li><li>rows：MySQL认为必须要执行的行数，在InnoDB引擎的表中，是一个估计值，可能并不总是准确的</li><li>filtered：表示返回结果的行数占需读取行数的百分比，filtered的值越大越好</li></ul><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><p>索引是帮助 MySQL <strong>高效获取数据</strong>的<strong>数据结构（有序）</strong>。在数据之外，数据库系统还维护着满足特定查找算法的数据结构，这些数据结构以某种方式引用（指向）数据，这样就可以在这些数据结构上实现高级查询算法，这种数据结构就是索引。</p><p>优缺点：</p><p>优点：</p><ul><li>提高数据检索效率，降低数据库的IO成本</li><li>通过索引列对数据进行排序，降低数据排序的成本，降低CPU的消耗</li></ul><p>缺点：</p><ul><li>索引列也是要占用空间的</li><li>索引大大提高了查询效率，但降低了更新的速度，比如 INSERT、UPDATE、DELETE</li></ul><h3 id="索引结构"><a href="#索引结构" class="headerlink" title="索引结构"></a>索引结构</h3><table><thead><tr><th>索引结构</th><th>描述</th></tr></thead><tbody><tr><td>B+Tree</td><td>最常见的索引类型，大部分引擎都支持B+树索引</td></tr><tr><td>Hash</td><td>底层数据结构是用哈希表实现，只有精确匹配索引列的查询才有效，不支持范围查询</td></tr><tr><td>R-Tree(空间索引)</td><td>空间索引是 MyISAM 引擎的一个特殊索引类型，主要用于地理空间数据类型，通常使用较少</td></tr><tr><td>Full-Text(全文索引)</td><td>是一种通过建立倒排索引，快速匹配文档的方式，类似于 Lucene, Solr, ES</td></tr></tbody></table><table><thead><tr><th>索引</th><th>InnoDB</th><th>MyISAM</th><th>Memory</th></tr></thead><tbody><tr><td>B+Tree索引</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>Hash索引</td><td>不支持</td><td>不支持</td><td>支持</td></tr><tr><td>R-Tree索引</td><td>不支持</td><td>支持</td><td>不支持</td></tr><tr><td>Full-text</td><td>5.6版本后支持</td><td>支持</td><td>不支持</td></tr></tbody></table><h4 id="B-Tree"><a href="#B-Tree" class="headerlink" title="B-Tree"></a>B-Tree</h4><p><img src="https://dhc.pythonanywhere.com/media/editor/%E4%BA%8C%E5%8F%89%E6%A0%91_20220316153214227108.png" alt="二叉树" title="二叉树"></p><p>二叉树的缺点可以用红黑树来解决：<br><img src="https://dhc.pythonanywhere.com/media/editor/%E7%BA%A2%E9%BB%91%E6%A0%91_20220316163142686602.png" alt="红黑树" title="红黑树"><br>红黑树也存在大数据量情况下，层级较深，检索速度慢的问题。</p><p>为了解决上述问题，可以使用 B-Tree 结构。<br>B-Tree (多路平衡查找树) 以一棵最大度数（max-degree，指一个节点的子节点个数）为5（5阶）的 b-tree 为例（每个节点最多存储4个key，5个指针）</p><p><img src="https://dhc.pythonanywhere.com/media/editor/B-Tree%E7%BB%93%E6%9E%84_20220316163813441163.png" alt="B-Tree结构" title="B-Tree结构"></p><blockquote><p>B-Tree 的数据插入过程动画参照：<a href="https://www.bilibili.com/video/BV1Kr4y1i7ru?p=68">https://www.bilibili.com/video/BV1Kr4y1i7ru?p=68</a><br>演示地址：<a href="https://www.cs.usfca.edu/~galles/visualization/BTree.html">https://www.cs.usfca.edu/~galles/visualization/BTree.html</a></p></blockquote><h4 id="B-Tree-1"><a href="#B-Tree-1" class="headerlink" title="B+Tree"></a>B+Tree</h4><p>结构图：</p><p><img src="https://dhc.pythonanywhere.com/media/editor/B+Tree%E7%BB%93%E6%9E%84%E5%9B%BE_20220316170700591277.png" alt="B+Tree结构图" title="B+Tree结构图"></p><blockquote><p>演示地址：<a href="https://www.cs.usfca.edu/~galles/visualization/BPlusTree.html">https://www.cs.usfca.edu/~galles/visualization/BPlusTree.html</a></p></blockquote><p>与 B-Tree 的区别：</p><ul><li>所有的数据都会出现在叶子节点</li><li>叶子节点形成一个单向链表</li></ul><p>MySQL 索引数据结构对经典的 B+Tree 进行了优化。在原 B+Tree 的基础上，增加一个指向相邻叶子节点的链表指针，就形成了带有顺序指针的 B+Tree，提高区间访问的性能。</p><p><img src="https://dhc.pythonanywhere.com/media/editor/%E7%BB%93%E6%9E%84%E5%9B%BE_20220316171730865611.png" alt="MySQL B+Tree 结构图" title="MySQL B+Tree 结构图"></p><h4 id="Hash"><a href="#Hash" class="headerlink" title="Hash"></a>Hash</h4><p>哈希索引就是采用一定的hash算法，将键值换算成新的hash值，映射到对应的槽位上，然后存储在hash表中。<br>如果两个（或多个）键值，映射到一个相同的槽位上，他们就产生了hash冲突（也称为hash碰撞），可以通过链表来解决。</p><p><img src="https://dhc.pythonanywhere.com/media/editor/Hash%E7%B4%A2%E5%BC%95%E5%8E%9F%E7%90%86%E5%9B%BE_20220317143226150679.png" alt="Hash索引原理图" title="Hash索引原理图"></p><p>特点：</p><ul><li>Hash索引只能用于对等比较（&#x3D;、in），不支持范围查询（betwwn、&gt;、&lt;、…）</li><li>无法利用索引完成排序操作</li><li>查询效率高，通常只需要一次检索就可以了，效率通常要高于 B+Tree 索引</li></ul><p>存储引擎支持：</p><ul><li>Memory</li><li>InnoDB: 具有自适应hash功能，hash索引是存储引擎根据 B+Tree 索引在指定条件下自动构建的</li></ul><h4 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h4><ol><li>为什么 InnoDB 存储引擎选择使用 B+Tree 索引结构？</li></ol><ul><li>相对于二叉树，层级更少，搜索效率高</li><li>对于 B-Tree，无论是叶子节点还是非叶子节点，都会保存数据，这样导致一页中存储的键值减少，指针也跟着减少，要同样保存大量数据，只能增加树的高度，导致性能降低</li><li>相对于 Hash 索引，B+Tree 支持范围匹配及排序操作</li></ul><h3 id="索引分类"><a href="#索引分类" class="headerlink" title="索引分类"></a>索引分类</h3><table><thead><tr><th>分类</th><th>含义</th><th>特点</th><th>关键字</th></tr></thead><tbody><tr><td>主键索引</td><td>针对于表中主键创建的索引</td><td>默认自动创建，只能有一个</td><td>PRIMARY</td></tr><tr><td>唯一索引</td><td>避免同一个表中某数据列中的值重复</td><td>可以有多个</td><td>UNIQUE</td></tr><tr><td>常规索引</td><td>快速定位特定数据</td><td>可以有多个</td><td></td></tr><tr><td>全文索引</td><td>全文索引查找的是文本中的关键词，而不是比较索引中的值</td><td>可以有多个</td><td>FULLTEXT</td></tr></tbody></table><p>在 InnoDB 存储引擎中，根据索引的存储形式，又可以分为以下两种：</p><table><thead><tr><th>分类</th><th>含义</th><th>特点</th></tr></thead><tbody><tr><td>聚集索引(Clustered Index)</td><td>将数据存储与索引放一块，索引结构的叶子节点保存了行数据</td><td>必须有，而且只有一个</td></tr><tr><td>二级索引(Secondary Index)</td><td>将数据与索引分开存储，索引结构的叶子节点关联的是对应的主键</td><td>可以存在多个</td></tr></tbody></table><p>演示图：</p><p><img src="https://dhc.pythonanywhere.com/media/editor/%E5%8E%9F%E7%90%86%E5%9B%BE_20220318194454880073.png" alt="大致原理" title="大致原理"><br><img src="https://dhc.pythonanywhere.com/media/editor/%E6%BC%94%E7%A4%BA%E5%9B%BE_20220319215403721066.png" alt="演示图" title="演示图"></p><p>聚集索引选取规则：</p><ul><li>如果存在主键，主键索引就是聚集索引</li><li>如果不存在主键，将使用第一个唯一(UNIQUE)索引作为聚集索引</li><li>如果表没有主键或没有合适的唯一索引，则 InnoDB 会自动生成一个 rowid 作为隐藏的聚集索引</li></ul><h4 id="思考题"><a href="#思考题" class="headerlink" title="思考题"></a>思考题</h4><p>1. 以下 SQL 语句，哪个执行效率高？为什么？</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from user where id = 10;</span><br><span class="line">select * from user where name = &#x27;Arm&#x27;;</span><br><span class="line">-- 备注：id为主键，name字段创建的有索引</span><br></pre></td></tr></table></figure><p>答：第一条语句，因为第二条需要回表查询，相当于两个步骤。</p><p>2. InnoDB 主键索引的 B+Tree 高度为多少？</p><p>答：假设一行数据大小为1k，一页中可以存储16行这样的数据。InnoDB 的指针占用6个字节的空间，主键假设为bigint，占用字节数为8.<br>可得公式：<code>n * 8 + (n + 1) * 6 = 16 * 1024</code>，其中 8 表示 bigint 占用的字节数，n 表示当前节点存储的key的数量，(n + 1) 表示指针数量（比key多一个）。算出n约为1170。</p><p>如果树的高度为2，那么他能存储的数据量大概为：<code>1171 * 16 = 18736</code>；<br>如果树的高度为3，那么他能存储的数据量大概为：<code>1171 * 1171 * 16 = 21939856</code>。</p><p>另外，如果有成千上万的数据，那么就要考虑分表，涉及运维篇知识。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p>创建索引：<br><code>CREATE [ UNIQUE | FULLTEXT ] INDEX index_name ON table_name (index_col_name, ...);</code><br>如果不加 CREATE 后面不加索引类型参数，则创建的是常规索引</p><p>查看索引：<br><code>SHOW INDEX FROM table_name;</code></p><p>删除索引：<br><code>DROP INDEX index_name ON table_name;</code></p><p>案例：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- name字段为姓名字段，该字段的值可能会重复，为该字段创建索引</span><br><span class="line">create index idx_user_name on tb_user(name);</span><br><span class="line">-- phone手机号字段的值非空，且唯一，为该字段创建唯一索引</span><br><span class="line">create unique index idx_user_phone on tb_user (phone);</span><br><span class="line">-- 为profession, age, status创建联合索引</span><br><span class="line">create index idx_user_pro_age_stat on tb_user(profession, age, status);</span><br><span class="line">-- 为email建立合适的索引来提升查询效率</span><br><span class="line">create index idx_user_email on tb_user(email);</span><br><span class="line"></span><br><span class="line">-- 删除索引</span><br><span class="line">drop index idx_user_email on tb_user;</span><br></pre></td></tr></table></figure><h3 id="使用规则"><a href="#使用规则" class="headerlink" title="使用规则"></a>使用规则</h3><h4 id="最左前缀法则"><a href="#最左前缀法则" class="headerlink" title="最左前缀法则"></a>最左前缀法则</h4><p>如果索引关联了多列（联合索引），要遵守最左前缀法则，最左前缀法则指的是查询从索引的最左列开始，并且不跳过索引中的列。<br>如果跳跃某一列，索引将部分失效（后面的字段索引失效）。</p><p>联合索引中，出现范围查询（&lt;, &gt;），范围查询右侧的列索引失效。可以用&gt;&#x3D;或者&lt;&#x3D;来规避索引失效问题。</p><h4 id="索引失效情况"><a href="#索引失效情况" class="headerlink" title="索引失效情况"></a>索引失效情况</h4><ol><li>在索引列上进行运算操作，索引将失效。如：<code>explain select * from tb_user where substring(phone, 10, 2) = &#39;15&#39;;</code></li><li>字符串类型字段使用时，不加引号，索引将失效。如：<code>explain select * from tb_user where phone = 17799990015;</code>，此处phone的值没有加引号</li><li>模糊查询中，如果仅仅是尾部模糊匹配，索引不会是失效；如果是头部模糊匹配，索引失效。如：<code>explain select * from tb_user where profession like &#39;%工程&#39;;</code>，前后都有 % 也会失效。</li><li>用 or 分割开的条件，如果 or 其中一个条件的列没有索引，那么涉及的索引都不会被用到。</li><li>如果 MySQL 评估使用索引比全表更慢，则不使用索引。</li></ol><h4 id="SQL-提示"><a href="#SQL-提示" class="headerlink" title="SQL 提示"></a>SQL 提示</h4><p>是优化数据库的一个重要手段，简单来说，就是在SQL语句中加入一些人为的提示来达到优化操作的目的。</p><p>例如，使用索引：<br><code>explain select * from tb_user use index(idx_user_pro) where profession=&quot;软件工程&quot;;</code><br>不使用哪个索引：<br><code>explain select * from tb_user ignore index(idx_user_pro) where profession=&quot;软件工程&quot;;</code><br>必须使用哪个索引：<br><code>explain select * from tb_user force index(idx_user_pro) where profession=&quot;软件工程&quot;;</code></p><p>use 是建议，实际使用哪个索引 MySQL 还会自己权衡运行速度去更改，force就是无论如何都强制使用该索引。</p><h4 id="覆盖索引-amp-回表查询"><a href="#覆盖索引-amp-回表查询" class="headerlink" title="覆盖索引&amp;回表查询"></a>覆盖索引&amp;回表查询</h4><p>尽量使用覆盖索引（查询使用了索引，并且需要返回的列，在该索引中已经全部能找到），减少 select *。</p><p>explain 中 extra 字段含义：<br><code>using index condition</code>：查找使用了索引，但是需要回表查询数据<br><code>using where; using index;</code>：查找使用了索引，但是需要的数据都在索引列中能找到，所以不需要回表查询</p><p>如果在聚集索引中直接能找到对应的行，则直接返回行数据，只需要一次查询，哪怕是select *；如果在辅助索引中找聚集索引，如<code>select id, name from xxx where name=&#39;xxx&#39;;</code>，也只需要通过辅助索引(name)查找到对应的id，返回name和name索引对应的id即可，只需要一次查询；如果是通过辅助索引查找其他字段，则需要回表查询，如<code>select id, name, gender from xxx where name=&#39;xxx&#39;;</code></p><p>所以尽量不要用<code>select *</code>，容易出现回表查询，降低效率，除非有联合索引包含了所有字段</p><p>面试题：一张表，有四个字段（id, username, password, status），由于数据量大，需要对以下SQL语句进行优化，该如何进行才是最优方案：<br><code>select id, username, password from tb_user where username=&#39;itcast&#39;;</code></p><p>解：给username和password字段建立联合索引，则不需要回表查询，直接覆盖索引</p><h4 id="前缀索引"><a href="#前缀索引" class="headerlink" title="前缀索引"></a>前缀索引</h4><p>当字段类型为字符串（varchar, text等）时，有时候需要索引很长的字符串，这会让索引变得很大，查询时，浪费大量的磁盘IO，影响查询效率，此时可以只降字符串的一部分前缀，建立索引，这样可以大大节约索引空间，从而提高索引效率。</p><p>语法：<code>create index idx_xxxx on table_name(columnn(n));</code><br>前缀长度：可以根据索引的选择性来决定，而选择性是指不重复的索引值（基数）和数据表的记录总数的比值，索引选择性越高则查询效率越高，唯一索引的选择性是1，这是最好的索引选择性，性能也是最好的。<br>求选择性公式：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select count(distinct email) / count(*) from tb_user;</span><br><span class="line">select count(distinct substring(email, 1, 5)) / count(*) from tb_user;</span><br></pre></td></tr></table></figure><p>show index 里面的sub_part可以看到接取的长度</p><h4 id="单列索引-amp-联合索引"><a href="#单列索引-amp-联合索引" class="headerlink" title="单列索引&amp;联合索引"></a>单列索引&amp;联合索引</h4><p>单列索引：即一个索引只包含单个列<br>联合索引：即一个索引包含了多个列<br>在业务场景中，如果存在多个查询条件，考虑针对于查询字段建立索引时，建议建立联合索引，而非单列索引。</p><p>单列索引情况：<br><code>explain select id, phone, name from tb_user where phone = &#39;17799990010&#39; and name = &#39;韩信&#39;;</code><br>这句只会用到phone索引字段</p><h5 id="注意事项-8"><a href="#注意事项-8" class="headerlink" title="注意事项"></a>注意事项</h5><ul><li>多条件联合查询时，MySQL优化器会评估哪个字段的索引效率更高，会选择该索引完成本次查询</li></ul><h3 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h3><ol><li>针对于数据量较大，且查询比较频繁的表建立索引</li><li>针对于常作为查询条件（where）、排序（order by）、分组（group by）操作的字段建立索引</li><li>尽量选择区分度高的列作为索引，尽量建立唯一索引，区分度越高，使用索引的效率越高</li><li>如果是字符串类型的字段，字段长度较长，可以针对于字段的特点，建立前缀索引</li><li>尽量使用联合索引，减少单列索引，查询时，联合索引很多时候可以覆盖索引，节省存储空间，避免回表，提高查询效率</li><li>要控制索引的数量，索引并不是多多益善，索引越多，维护索引结构的代价就越大，会影响增删改的效率</li><li>如果索引列不能存储NULL值，请在创建表时使用NOT NULL约束它。当优化器知道每列是否包含NULL值时，它可以更好地确定哪个索引最有效地用于查询</li></ol><h2 id="SQL-优化"><a href="#SQL-优化" class="headerlink" title="SQL 优化"></a>SQL 优化</h2><h3 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h3><p>普通插入：</p><ol><li>采用批量插入（一次插入的数据不建议超过1000条）</li><li>手动提交事务</li><li>主键顺序插入</li></ol><p>大批量插入：<br>如果一次性需要插入大批量数据，使用insert语句插入性能较低，此时可以使用MySQL数据库提供的load指令插入。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 客户端连接服务端时，加上参数 --local-infile（这一行在bash/cmd界面输入）</span><br><span class="line">mysql --local-infile -u root -p</span><br><span class="line"># 设置全局参数local_infile为1，开启从本地加载文件导入数据的开关</span><br><span class="line">set global local_infile = 1;</span><br><span class="line">select @@local_infile;</span><br><span class="line"># 执行load指令将准备好的数据，加载到表结构中</span><br><span class="line">load data local infile &#x27;/root/sql1.log&#x27; into table &#x27;tb_user&#x27; fields terminated by &#x27;,&#x27; lines terminated by &#x27;\n&#x27;;</span><br></pre></td></tr></table></figure><h3 id="主键优化"><a href="#主键优化" class="headerlink" title="主键优化"></a>主键优化</h3><p>数据组织方式：在InnoDB存储引擎中，表数据都是根据主键顺序组织存放的，这种存储方式的表称为索引组织表（Index organized table, IOT）</p><p>页分裂：页可以为空，也可以填充一般，也可以填充100%，每个页包含了2-N行数据（如果一行数据过大，会行溢出），根据主键排列。<br>页合并：当删除一行记录时，实际上记录并没有被物理删除，只是记录被标记（flaged）为删除并且它的空间变得允许被其他记录声明使用。当页中删除的记录到达 MERGE_THRESHOLD（默认为页的50%），InnoDB会开始寻找最靠近的页（前后）看看是否可以将这两个页合并以优化空间使用。</p><p>MERGE_THRESHOLD：合并页的阈值，可以自己设置，在创建表或创建索引时指定</p><blockquote><p>文字说明不够清晰明了，具体可以看视频里的PPT演示过程：<a href="https://www.bilibili.com/video/BV1Kr4y1i7ru?p=90">https://www.bilibili.com/video/BV1Kr4y1i7ru?p=90</a></p></blockquote><p>主键设计原则：</p><ul><li>满足业务需求的情况下，尽量降低主键的长度</li><li>插入数据时，尽量选择顺序插入，选择使用 AUTO_INCREMENT 自增主键</li><li>尽量不要使用 UUID 做主键或者是其他的自然主键，如身份证号</li><li>业务操作时，避免对主键的修改</li></ul><h3 id="order-by优化"><a href="#order-by优化" class="headerlink" title="order by优化"></a>order by优化</h3><ol><li>Using filesort：通过表的索引或全表扫描，读取满足条件的数据行，然后在排序缓冲区 sort buffer 中完成排序操作，所有不是通过索引直接返回排序结果的排序都叫 FileSort 排序</li><li>Using index：通过有序索引顺序扫描直接返回有序数据，这种情况即为 using index，不需要额外排序，操作效率高</li></ol><p>如果order by字段全部使用升序排序或者降序排序，则都会走索引，但是如果一个字段升序排序，另一个字段降序排序，则不会走索引，explain的extra信息显示的是<code>Using index, Using filesort</code>，如果要优化掉Using filesort，则需要另外再创建一个索引，如：<code>create index idx_user_age_phone_ad on tb_user(age asc, phone desc);</code>，此时使用<code>select id, age, phone from tb_user order by age asc, phone desc;</code>会全部走索引</p><p>总结：</p><ul><li>根据排序字段建立合适的索引，多字段排序时，也遵循最左前缀法则</li><li>尽量使用覆盖索引</li><li>多字段排序，一个升序一个降序，此时需要注意联合索引在创建时的规则（ASC&#x2F;DESC）</li><li>如果不可避免出现filesort，大数据量排序时，可以适当增大排序缓冲区大小 sort_buffer_size（默认256k）</li></ul><h3 id="group-by优化"><a href="#group-by优化" class="headerlink" title="group by优化"></a>group by优化</h3><ul><li>在分组操作时，可以通过索引来提高效率</li><li>分组操作时，索引的使用也是满足最左前缀法则的</li></ul><p>如索引为<code>idx_user_pro_age_stat</code>，则句式可以是<code>select ... where profession order by age</code>，这样也符合最左前缀法则</p><h3 id="limit优化"><a href="#limit优化" class="headerlink" title="limit优化"></a>limit优化</h3><p>常见的问题如<code>limit 2000000, 10</code>，此时需要 MySQL 排序前2000000条记录，但仅仅返回2000000 - 2000010的记录，其他记录丢弃，查询排序的代价非常大。<br>优化方案：一般分页查询时，通过创建覆盖索引能够比较好地提高性能，可以通过覆盖索引加子查询形式进行优化</p><p>例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 此语句耗时很长</span><br><span class="line">select * from tb_sku limit 9000000, 10;</span><br><span class="line">-- 通过覆盖索引加快速度，直接通过主键索引进行排序及查询</span><br><span class="line">select id from tb_sku order by id limit 9000000, 10;</span><br><span class="line">-- 下面的语句是错误的，因为 MySQL 不支持 in 里面使用 limit</span><br><span class="line">-- select * from tb_sku where id in (select id from tb_sku order by id limit 9000000, 10);</span><br><span class="line">-- 通过连表查询即可实现第一句的效果，并且能达到第二句的速度</span><br><span class="line">select * from tb_sku as s, (select id from tb_sku order by id limit 9000000, 10) as a where s.id = a.id;</span><br></pre></td></tr></table></figure><h3 id="count优化"><a href="#count优化" class="headerlink" title="count优化"></a>count优化</h3><p>MyISAM 引擎把一个表的总行数存在了磁盘上，因此执行 count(*) 的时候会直接返回这个数，效率很高（前提是不适用where）；<br>InnoDB 在执行 count(*) 时，需要把数据一行一行地从引擎里面读出来，然后累计计数。<br>优化方案：自己计数，如创建key-value表存储在内存或硬盘，或者是用redis</p><p>count的几种用法：</p><ul><li>如果count函数的参数（count里面写的那个字段）不是NULL（字段值不为NULL），累计值就加一，最后返回累计值</li><li>用法：count(*)、count(主键)、count(字段)、count(1)</li><li>count(主键)跟count(*)一样，因为主键不能为空；count(字段)只计算字段值不为NULL的行；count(1)引擎会为每行添加一个1，然后就count这个1，返回结果也跟count(*)一样；count(null)返回0</li></ul><p>各种用法的性能：</p><ul><li>count(主键)：InnoDB引擎会遍历整张表，把每行的主键id值都取出来，返回给服务层，服务层拿到主键后，直接按行进行累加（主键不可能为空）</li><li>count(字段)：没有not null约束的话，InnoDB引擎会遍历整张表把每一行的字段值都取出来，返回给服务层，服务层判断是否为null，不为null，计数累加；有not null约束的话，InnoDB引擎会遍历整张表把每一行的字段值都取出来，返回给服务层，直接按行进行累加</li><li>count(1)：InnoDB 引擎遍历整张表，但不取值。服务层对于返回的每一层，放一个数字 1 进去，直接按行进行累加</li><li>count(*)：InnoDB 引擎并不会把全部字段取出来，而是专门做了优化，不取值，服务层直接按行进行累加</li></ul><p>按效率排序：count(字段) &lt; count(主键) &lt; count(1) &lt; count(*)，所以尽量使用 count(*)</p><h3 id="update优化（避免行锁升级为表锁）"><a href="#update优化（避免行锁升级为表锁）" class="headerlink" title="update优化（避免行锁升级为表锁）"></a>update优化（避免行锁升级为表锁）</h3><p>InnoDB 的行锁是针对索引加的锁，不是针对记录加的锁，并且该索引不能失效，否则会从行锁升级为表锁。</p><p>如以下两条语句：<br><code>update student set no = &#39;123&#39; where id = 1;</code>，这句由于id有主键索引，所以只会锁这一行；<br><code>update student set no = &#39;123&#39; where name = &#39;test&#39;;</code>，这句由于name没有索引，所以会把整张表都锁住进行数据更新，解决方法是给name字段添加索引</p><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><h2 id="整型"><a href="#整型" class="headerlink" title="整型"></a>整型</h2><table><thead><tr><th>类型名称</th><th>取值范围</th><th>大小</th></tr></thead><tbody><tr><td>TINYINT</td><td>-128〜127</td><td>1个字节</td></tr><tr><td>SMALLINT</td><td>-32768〜32767</td><td>2个宇节</td></tr><tr><td>MEDIUMINT</td><td>-8388608〜8388607</td><td>3个字节</td></tr><tr><td>INT (INTEGHR)</td><td>-2147483648〜2147483647</td><td>4个字节</td></tr><tr><td>BIGINT</td><td>-9223372036854775808〜9223372036854775807</td><td>8个字节</td></tr></tbody></table><p>无符号在数据类型后加 unsigned 关键字。</p><h2 id="浮点型"><a href="#浮点型" class="headerlink" title="浮点型"></a>浮点型</h2><table><thead><tr><th>类型名称</th><th>说明</th><th>存储需求</th></tr></thead><tbody><tr><td>FLOAT</td><td>单精度浮点数</td><td>4 个字节</td></tr><tr><td>DOUBLE</td><td>双精度浮点数</td><td>8 个字节</td></tr><tr><td>DECIMAL (M, D)，DEC</td><td>压缩的“严格”定点数</td><td>M+2 个字节</td></tr></tbody></table><h2 id="日期和时间"><a href="#日期和时间" class="headerlink" title="日期和时间"></a>日期和时间</h2><table><thead><tr><th>类型名称</th><th>日期格式</th><th>日期范围</th><th>存储需求</th></tr></thead><tbody><tr><td>YEAR</td><td>YYYY</td><td>1901 ~ 2155</td><td>1 个字节</td></tr><tr><td>TIME</td><td>HH:MM:SS</td><td>-838:59:59 ~ 838:59:59</td><td>3 个字节</td></tr><tr><td>DATE</td><td>YYYY-MM-DD</td><td>1000-01-01 ~ 9999-12-3</td><td>3 个字节</td></tr><tr><td>DATETIME</td><td>YYYY-MM-DD HH:MM:SS</td><td>1000-01-01 00:00:00 ~ 9999-12-31 23:59:59</td><td>8 个字节</td></tr><tr><td>TIMESTAMP</td><td>YYYY-MM-DD HH:MM:SS</td><td>1980-01-01 00:00:01 UTC ~ 2040-01-19 03:14:07 UTC</td><td>4 个字节</td></tr></tbody></table><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><table><thead><tr><th>类型名称</th><th>说明</th><th>存储需求</th></tr></thead><tbody><tr><td>CHAR(M)</td><td>固定长度非二进制字符串</td><td>M 字节，1&lt;&#x3D;M&lt;&#x3D;255</td></tr><tr><td>VARCHAR(M)</td><td>变长非二进制字符串</td><td>L+1字节，在此，L&lt; &#x3D; M和 1&lt;&#x3D;M&lt;&#x3D;255</td></tr><tr><td>TINYTEXT</td><td>非常小的非二进制字符串</td><td>L+1字节，在此，L&lt;2^8</td></tr><tr><td>TEXT</td><td>小的非二进制字符串</td><td>L+2字节，在此，L&lt;2^16</td></tr><tr><td>MEDIUMTEXT</td><td>中等大小的非二进制字符串</td><td>L+3字节，在此，L&lt;2^24</td></tr><tr><td>LONGTEXT</td><td>大的非二进制字符串</td><td>L+4字节，在此，L&lt;2^32</td></tr><tr><td>ENUM</td><td>枚举类型，只能有一个枚举字符串值</td><td>1或2个字节，取决于枚举值的数目 (最大值为65535)</td></tr><tr><td>SET</td><td>一个设置，字符串对象可以有零个或 多个SET成员</td><td>1、2、3、4或8个字节，取决于集合 成员的数量（最多64个成员）</td></tr></tbody></table><h2 id="二进制类型"><a href="#二进制类型" class="headerlink" title="二进制类型"></a>二进制类型</h2><table><thead><tr><th>类型名称</th><th>说明</th><th>存储需求</th></tr></thead><tbody><tr><td>BIT(M)</td><td>位字段类型</td><td>大约 (M+7)&#x2F;8 字节</td></tr><tr><td>BINARY(M)</td><td>固定长度二进制字符串</td><td>M 字节</td></tr><tr><td>VARBINARY (M)</td><td>可变长度二进制字符串</td><td>M+1 字节</td></tr><tr><td>TINYBLOB (M)</td><td>非常小的BLOB</td><td>L+1 字节，在此，L&lt;2^8</td></tr><tr><td>BLOB (M)</td><td>小 BLOB</td><td>L+2 字节，在此，L&lt;2^16</td></tr><tr><td>MEDIUMBLOB (M)</td><td>中等大小的BLOB</td><td>L+3 字节，在此，L&lt;2^24</td></tr><tr><td>LONGBLOB (M)</td><td>非常大的BLOB</td><td>L+4 字节，在此，L&lt;2^32</td></tr></tbody></table><h1 id="权限一览表"><a href="#权限一览表" class="headerlink" title="权限一览表"></a>权限一览表</h1><blockquote><p>具体权限的作用详见<a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html" title="官方文档">官方文档</a></p></blockquote><p>GRANT 和 REVOKE 允许的静态权限</p><table><thead><tr><th align="left">Privilege</th><th align="left">Grant Table Column</th><th align="left">Context</th></tr></thead><tbody><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_all"><code>ALL [PRIVILEGES]</code></a></td><td align="left">Synonym for “all privileges”</td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_alter"><code>ALTER</code></a></td><td align="left"><code>Alter_priv</code></td><td align="left">Tables</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_alter-routine"><code>ALTER ROUTINE</code></a></td><td align="left"><code>Alter_routine_priv</code></td><td align="left">Stored routines</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create"><code>CREATE</code></a></td><td align="left"><code>Create_priv</code></td><td align="left">Databases, tables, or indexes</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create-role"><code>CREATE ROLE</code></a></td><td align="left"><code>Create_role_priv</code></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create-routine"><code>CREATE ROUTINE</code></a></td><td align="left"><code>Create_routine_priv</code></td><td align="left">Stored routines</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create-tablespace"><code>CREATE TABLESPACE</code></a></td><td align="left"><code>Create_tablespace_priv</code></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create-temporary-tables"><code>CREATE TEMPORARY TABLES</code></a></td><td align="left"><code>Create_tmp_table_priv</code></td><td align="left">Tables</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create-user"><code>CREATE USER</code></a></td><td align="left"><code>Create_user_priv</code></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create-view"><code>CREATE VIEW</code></a></td><td align="left"><code>Create_view_priv</code></td><td align="left">Views</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_delete"><code>DELETE</code></a></td><td align="left"><code>Delete_priv</code></td><td align="left">Tables</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_drop"><code>DROP</code></a></td><td align="left"><code>Drop_priv</code></td><td align="left">Databases, tables, or views</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_drop-role"><code>DROP ROLE</code></a></td><td align="left"><code>Drop_role_priv</code></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_event"><code>EVENT</code></a></td><td align="left"><code>Event_priv</code></td><td align="left">Databases</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_execute"><code>EXECUTE</code></a></td><td align="left"><code>Execute_priv</code></td><td align="left">Stored routines</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_file"><code>FILE</code></a></td><td align="left"><code>File_priv</code></td><td align="left">File access on server host</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_grant-option"><code>GRANT OPTION</code></a></td><td align="left"><code>Grant_priv</code></td><td align="left">Databases, tables, or stored routines</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_index"><code>INDEX</code></a></td><td align="left"><code>Index_priv</code></td><td align="left">Tables</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_insert"><code>INSERT</code></a></td><td align="left"><code>Insert_priv</code></td><td align="left">Tables or columns</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_lock-tables"><code>LOCK TABLES</code></a></td><td align="left"><code>Lock_tables_priv</code></td><td align="left">Databases</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_process"><code>PROCESS</code></a></td><td align="left"><code>Process_priv</code></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_proxy"><code>PROXY</code></a></td><td align="left">See <code>proxies_priv</code> table</td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_references"><code>REFERENCES</code></a></td><td align="left"><code>References_priv</code></td><td align="left">Databases or tables</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_reload"><code>RELOAD</code></a></td><td align="left"><code>Reload_priv</code></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_replication-client"><code>REPLICATION CLIENT</code></a></td><td align="left"><code>Repl_client_priv</code></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_replication-slave"><code>REPLICATION SLAVE</code></a></td><td align="left"><code>Repl_slave_priv</code></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_select"><code>SELECT</code></a></td><td align="left"><code>Select_priv</code></td><td align="left">Tables or columns</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_show-databases"><code>SHOW DATABASES</code></a></td><td align="left"><code>Show_db_priv</code></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_show-view"><code>SHOW VIEW</code></a></td><td align="left"><code>Show_view_priv</code></td><td align="left">Views</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_shutdown"><code>SHUTDOWN</code></a></td><td align="left"><code>Shutdown_priv</code></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_super"><code>SUPER</code></a></td><td align="left"><code>Super_priv</code></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_trigger"><code>TRIGGER</code></a></td><td align="left"><code>Trigger_priv</code></td><td align="left">Tables</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_update"><code>UPDATE</code></a></td><td align="left"><code>Update_priv</code></td><td align="left">Tables or columns</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_usage"><code>USAGE</code></a></td><td align="left">Synonym for “no privileges”</td><td align="left">Server administration</td></tr></tbody></table><p>GRANT 和 REVOKE 允许的动态权限</p><table><thead><tr><th align="left">Privilege</th><th align="left">Context</th></tr></thead><tbody><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_application-password-admin"><code>APPLICATION_PASSWORD_ADMIN</code></a></td><td align="left">Dual password administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_audit-abort-exempt"><code>AUDIT_ABORT_EXEMPT</code></a></td><td align="left">Allow queries blocked by audit log filter</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_audit-admin"><code>AUDIT_ADMIN</code></a></td><td align="left">Audit log administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_authentication-policy-admin"><code>AUTHENTICATION_POLICY_ADMIN</code></a></td><td align="left">Authentication administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_backup-admin"><code>BACKUP_ADMIN</code></a></td><td align="left">Backup administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_binlog-admin"><code>BINLOG_ADMIN</code></a></td><td align="left">Backup and Replication administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_binlog-encryption-admin"><code>BINLOG_ENCRYPTION_ADMIN</code></a></td><td align="left">Backup and Replication administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_clone-admin"><code>CLONE_ADMIN</code></a></td><td align="left">Clone administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_connection-admin"><code>CONNECTION_ADMIN</code></a></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_encryption-key-admin"><code>ENCRYPTION_KEY_ADMIN</code></a></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_firewall-admin"><code>FIREWALL_ADMIN</code></a></td><td align="left">Firewall administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_firewall-exempt"><code>FIREWALL_EXEMPT</code></a></td><td align="left">Firewall administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_firewall-user"><code>FIREWALL_USER</code></a></td><td align="left">Firewall administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_flush-optimizer-costs"><code>FLUSH_OPTIMIZER_COSTS</code></a></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_flush-status"><code>FLUSH_STATUS</code></a></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_flush-tables"><code>FLUSH_TABLES</code></a></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_flush-user-resources"><code>FLUSH_USER_RESOURCES</code></a></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_group-replication-admin"><code>GROUP_REPLICATION_ADMIN</code></a></td><td align="left">Replication administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_group-replication-stream"><code>GROUP_REPLICATION_STREAM</code></a></td><td align="left">Replication administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_innodb-redo-log-archive"><code>INNODB_REDO_LOG_ARCHIVE</code></a></td><td align="left">Redo log archiving administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_ndb-stored-user"><code>NDB_STORED_USER</code></a></td><td align="left">NDB Cluster</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_passwordless-user-admin"><code>PASSWORDLESS_USER_ADMIN</code></a></td><td align="left">Authentication administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_persist-ro-variables-admin"><code>PERSIST_RO_VARIABLES_ADMIN</code></a></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_replication-applier"><code>REPLICATION_APPLIER</code></a></td><td align="left"><code>PRIVILEGE_CHECKS_USER</code> for a replication channel</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_replication-slave-admin"><code>REPLICATION_SLAVE_ADMIN</code></a></td><td align="left">Replication administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_resource-group-admin"><code>RESOURCE_GROUP_ADMIN</code></a></td><td align="left">Resource group administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_resource-group-user"><code>RESOURCE_GROUP_USER</code></a></td><td align="left">Resource group administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_role-admin"><code>ROLE_ADMIN</code></a></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_session-variables-admin"><code>SESSION_VARIABLES_ADMIN</code></a></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_set-user-id"><code>SET_USER_ID</code></a></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_show-routine"><code>SHOW_ROUTINE</code></a></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_system-user"><code>SYSTEM_USER</code></a></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_system-variables-admin"><code>SYSTEM_VARIABLES_ADMIN</code></a></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_table-encryption-admin"><code>TABLE_ENCRYPTION_ADMIN</code></a></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_version-token-admin"><code>VERSION_TOKEN_ADMIN</code></a></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_xa-recover-admin"><code>XA_RECOVER_ADMIN</code></a></td><td align="left">Server administration</td></tr></tbody></table><h1 id="图形化界面工具"><a href="#图形化界面工具" class="headerlink" title="图形化界面工具"></a>图形化界面工具</h1><ul><li>Workbench(免费): <a href="http://dev.mysql.com/downloads/workbench/">http://dev.mysql.com/downloads/workbench/</a></li><li>navicat(收费，试用版30天): <a href="https://www.navicat.com/en/download/navicat-for-mysql">https://www.navicat.com/en/download/navicat-for-mysql</a></li><li>Sequel Pro(开源免费，仅支持Mac OS): <a href="http://www.sequelpro.com/">http://www.sequelpro.com/</a></li><li>HeidiSQL(免费): <a href="http://www.heidisql.com/">http://www.heidisql.com/</a></li><li>phpMyAdmin(免费): <a href="https://www.phpmyadmin.net/">https://www.phpmyadmin.net/</a></li><li>SQLyog: <a href="https://sqlyog.en.softonic.com/">https://sqlyog.en.softonic.com/</a></li></ul><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h1 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h1><ol><li>在SQL语句之后加上<code>\G</code>会将结果的表格形式转换成行文本形式</li><li>查看Mysql数据库占用空间：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT table_schema &quot;Database Name&quot;</span><br><span class="line">     , SUM(data_length + index_length) / (1024 * 1024) &quot;Database Size in MB&quot;</span><br><span class="line">FROM information_schema.TABLES</span><br><span class="line">GROUP BY table_schema;</span><br></pre></td></tr></table></figure></li></ol><h1 id="后续内容"><a href="#后续内容" class="headerlink" title="后续内容"></a>后续内容</h1><p>后续内容因为跟当前学习、工作计划有冲突，所以后续课程的学习计划会无限期推后。<br>目前的工作重点放在重做一个学习笔记网站，当然这是边做边学的，开发过程中遇到的难点和知识点我也会记录下来供大家学习。<br><strong>在此感谢B站同样爱学习的同学 @守心-人 提供的后续课程笔记，大家有条件一定要去给个star，你的每一个star和点赞都是我们前进的动力</strong><br><strong><a href="https://github.com/Buildings-Lei/mysql_note/blob/main/README.md">https://github.com/Buildings-Lei/mysql_note&#x2F;blob&#x2F;main&#x2F;README.md</a></strong></p>]]></content>
      
      
      <categories>
          
          <category> 大厦的钉子 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 钉子 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL基础</title>
      <link href="/2023/08/01/MySQL%E5%9F%BA%E7%A1%80/"/>
      <url>/2023/08/01/MySQL%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th>软件名</th><th>作用</th></tr></thead><tbody><tr><td>DataGrip</td><td>数据库</td></tr><tr><td>WebStorm</td><td>前端编辑器</td></tr><tr><td>IntelliJ IDEA</td><td>Java编辑器</td></tr><tr><td>PyCharm</td><td>Python编辑器</td></tr></tbody></table><h1 id="MySQL篇章"><a href="#MySQL篇章" class="headerlink" title="MySQL篇章"></a>MySQL篇章</h1><h3 id="1、关系型数据库（RDBMS）"><a href="#1、关系型数据库（RDBMS）" class="headerlink" title="1、关系型数据库（RDBMS）"></a>1、关系型数据库（RDBMS）</h3><p>概念：建立在关系模型基础上，由多张相互连接的二维表组成的数据库</p><h3 id="2、MySQL启动"><a href="#2、MySQL启动" class="headerlink" title="2、MySQL启动"></a>2、MySQL启动</h3><p>net start mysql80<br>net stop mysql80</p><p>MySQL客户端连接<br>一种是：mysql -u root -p<br>另一种是：直接寻找M有SQL 8.0 Command Line Client - Unicode点击打开后即可</p><h3 id="3、MySQL数据模型：数据库、表"><a href="#3、MySQL数据模型：数据库、表" class="headerlink" title="3、MySQL数据模型：数据库、表"></a>3、MySQL数据模型：数据库、表</h3><h3 id="4、SQL分类"><a href="#4、SQL分类" class="headerlink" title="4、SQL分类"></a>4、SQL分类</h3><p>DDL：数据定义语言，用来定义数据库对象（数据库，表，字段）<br>DML：数据操作语言，用来对数据表中的数据进行增删改<br>DQL：数据查询语言，用来查询数据库中表的记录<br>DCL：数据控制语言，用来创建数据库用户、控制数据库的访问权限</p><h3 id="5、注意，在删除表时，表中的全部数据也会被删除"><a href="#5、注意，在删除表时，表中的全部数据也会被删除" class="headerlink" title="5、注意，在删除表时，表中的全部数据也会被删除"></a>5、注意，在删除表时，表中的全部数据也会被删除</h3><p>具体操作的代码：</p><ul><li><p>DDL数据库操作：<br>show databases; &#x2F;&#x2F; 展示已有数据库的情况；<br>create database 数据库名；&#x2F;&#x2F; 创建一个新的数据库<br>use 数据库名； &#x2F;&#x2F; 具体使用哪一个数据库<br>select database(); &#x2F;&#x2F; 查看现在在哪一个数据库中<br>drop database 数据库名； &#x2F;&#x2F; 删除哪一个数据库<br>in</p></li><li><p>DDL表操作：<br>show tables; &#x2F;&#x2F;  展示已有tables的情况<br>create table 表名 （字段 字段类型 [comment ‘   ‘]，<br>字段 字段类型 [comment ‘   ‘]，<br>字段，字段类型 [comment ‘   ‘]）[commit ‘   ‘]；&#x2F;&#x2F; 创建的表的具体的结构与表头<br>desc 表名;&#x2F;&#x2F; 展示表的结构信息<br>show create table 表名；&#x2F;&#x2F; 进一步展示表的结构信息<br>alter table 表名 add&#x2F;modify&#x2F;change&#x2F;drop&#x2F;rename to … &#x2F;&#x2F; 进行文章结构的删减与修改<br>drop table 表名；&#x2F;&#x2F; 进行删表操作</p></li><li><p>DML-添加数据<br>insert info 表名（字段名1，字段名2，…）values (值1，值2，…);&#x2F;&#x2F; 给指定字段添加数据<br>insert info 表名 values (值1，值2，…) &#x2F;&#x2F; 给全部字段添加数据<br>&#x2F;&#x2F; 批量添加数据<br>insert info 表名 (字段名1，字段名2，…) values (值1，值2，…), (值1，值2，…),(值1，值2，…);</p></li></ul><p>注意事项：</p><ul><li>1、插入数据时，指定的字段顺序需要与值的顺序是一一对应的。</li><li>2、字符串和日期型数据应该包含在引号中。</li><li>3、插入的数据大小，应该在字段的规定范围内。（比如什么varchar（5）这样子，限定你长度之类的）</li></ul><p>此处插入一个知识点：varchar 和 char 是 MySQL 中的两种数据类型，都是用来存储字符串的。<br>两者的区别在于：varchar 类型的长度是可变的，而 char 类型的长度是固定的。char 类型是一个定长的字段，以 char(10) 为例，不管真实的存储内容多大或者是占了多少空间，都会消耗掉 10 个字符的空间。但是char类型的使用效率会比较的高。</p><ul><li>DML 更新数据与删除数据<br>更新数据：update 表名 set 字段名1&#x3D;值1，字段名2&#x3D;值2，…[where 条件]；<br>注意：修改语句的条件可以有，也可以没有，如果没有条件，则会修改整张表的所有数据。<br>删除数据：delete from 表名 [where 条件]<br>注意：<br>1、delete 语句的条件可以有，也可以没有，如果没有条件，则会删除整张表的所有数据。<br>2、delete 语句不能删除某一个字段的值（可以使用update）</li></ul><p>（5）DQL语法：<br>select 字段列表<br>from 表名列表<br>where 条件列表<br>group by 分组字段列表<br>having 分组后条件列表<br>order by 排序字段列表<br>limit 分页参数</p><h3 id="一、DQL基本查询"><a href="#一、DQL基本查询" class="headerlink" title="一、DQL基本查询"></a>一、DQL基本查询</h3><p>1、查询多个字段：<br>select 字段1，字段2，字段3… from 表名;<br>select * from 表名;<br>2、设置别名：&#x2F;&#x2F; 方便理解罢了<br>select 字段1[as 别名1],字段2[as 别名2],… from 表名；<br>3、去除重复记录（其实就是去重操作而已）<br>select distinct 字段列表 from 表名;&#x2F;&#x2F; 其实看英文意思就知道是distinct，差异性</p><h3 id="二、DQL条件查询"><a href="#二、DQL条件查询" class="headerlink" title="二、DQL条件查询"></a>二、DQL条件查询</h3><p>select 字段列表 from 表名 where 条件列表；&#x2F;&#x2F; 代码的形式<br>一个有意思的查询条件：select * from emp where name like ‘__’; &#x2F;&#x2F; 这里的是两个下划线，表示是两个占位符，匹配到两个内容的</p><h3 id="三、DQL聚合查询"><a href="#三、DQL聚合查询" class="headerlink" title="三、DQL聚合查询"></a>三、DQL聚合查询</h3><p>对应的语法是：select 聚合函数（字段列表） from 表名; &#x2F;&#x2F;将一列数据作为一个整体，进行纵向计算<br>注意：null值不参与所有聚合函数运算</p><h3 id="四、DQL分组查询"><a href="#四、DQL分组查询" class="headerlink" title="四、DQL分组查询"></a>四、DQL分组查询</h3><p>语法：select 字段列表 from 表名 [where 条件] group by 分组字段名 [having 分组后过滤条件]；<br>注意：<br>此处的where与having的区别是：<br>1、执行时机不同:where 是分组之前进行过滤，不满足where条件，不参与分组；而having是分组之后对结果进行过滤。<br>2、判断条件不同：where不能对聚合函数进行判断，而having可以<br>执行顺序：where&gt;聚合函数&gt;having。<br>分组之后，查询的字段一般为聚合函数和分组字段，查询其他字段无任何意义。</p><h3 id="五、DQL排序查询"><a href="#五、DQL排序查询" class="headerlink" title="五、DQL排序查询"></a>五、DQL排序查询</h3><p>语法：select 字段列表 from 表名 order by 字段1 排序方式1， 字段2 排序方式2； &#x2F;&#x2F; 相应的执行代码<br>排序方式：asc——升序（默认值）     desc——降序</p><p>注意：如果是多字段排序，当第一个字段值相同时，才会根据第二个字段进行排序。</p><h3 id="六、DQL分页查询"><a href="#六、DQL分页查询" class="headerlink" title="六、DQL分页查询"></a>六、DQL分页查询</h3><p>语法：select  字段列表 from 表名 limit 起始索引，查询记录数；<br>注意：<br>1、起始索引从0开始，起始索引从0开始，起始索引&#x3D;（查询页码-1）*每页显示记录数。<br>2、分页查询是数据库的方言，不同的数据库有不同的实现，MySQL中是LIMIT。<br>3、如果查询的是第一页数据，起始索引（）可以省略，直接简写为limit 10.</p><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><p>1、grouby 先于 order 先于limit 的顺序进行写代码的（其实就是<br>select<br>    字段列表<br>from<br>    表名列表<br>where<br>    条件列表<br>group by<br>    分组字段列表<br>having<br>    分组后条件列表<br>order by<br>    排序字段列表<br>limit<br>    分页参数<br>）的顺序——即编写顺序</p><p>相应的执行顺序为：<br>from<br>    表名列表<br>where<br>    条件列表<br>group by<br>    分组字段列表<br>having<br>    分组后条件列表<br>select<br>    字段列表<br>order by<br>    排序字段列表<br>limit<br>    分页参数</p><p>（6）DCL–用于管理数据库用户、控制数据库的访问权限<br>相应的代码：<br>1、查询用户</p><figure class="highlight plaintext"><figcaption><span>mysql;</span></figcaption><table><tr><td class="code"><pre><span class="line">select * from user;</span><br></pre></td></tr></table></figure><p>2、创建用户</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create user &#x27;用户名&#x27;@&#x27;主机名&#x27; identified by &#x27;密码&#x27;;</span><br></pre></td></tr></table></figure><p>3、修改用户密码</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alter user &#x27;用户名&#x27;@&#x27;主机名&#x27; identified with mysql_native_password by &#x27;新密码&#x27;;</span><br></pre></td></tr></table></figure><p>4、删除用户</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">drop user &#x27;用户名&#x27;@&#x27;主机名&#x27;;</span><br></pre></td></tr></table></figure><p>注意：<br>1、主机名可以使用%通配。<br>2、这类SQL开发人员操作的比较少，主要是DBA（Database Administrator 数据库管理员）使用。</p><p>DCL-权限（常用的权限）<br>all,all privileges——所有权限<br>select——查询数据<br>insert——插入数据<br>update——修改数据<br>delete——删除数据<br>alter——修改表<br>drop——删除数据库&#x2F;表&#x2F;视图<br>create——创建数据库&#x2F;表 </p><p>权限控制代码：<br>1、查询权限：<br>show grants for ‘用户名‘@’主机名’;<br>2、授予权限：<br>grant 权限列表 on 数据库名.表名 to ‘用户名‘@’主机名’;<br>3、撤销权限：<br>revoke 权限列表 on 数据库名.表名 from ‘用户名‘@’主机名’；<br>注意：<br>1、多个权限之间，使用逗号分隔;<br>2、授权时，数据库名和表名可以使用*进行统配，代表所有。</p><p>函数部分：<br>1、字符串函数<br>concat, lower, upper, lpad, rpad, trim, substring<br>2、数值函数<br>ceit, floor, mod, rand, round<br>3、日期函数<br>curdate, curtime, now, year, month, day, date_add, datediff<br>4、流程函数<br>if, ifnull, case […] when … then … else … end<br>流程函数的应用实例是：<br>(case when math &gt;&#x3D; 85 then ‘优秀’ when math &gt;&#x3D;60 then ‘及格’ else ‘不及格’ end) ‘数学’</p><p>约束<br>概述：约束是作用于表中字段上的规则，用于限制存储在表中的数据。<br>目的：保证数据库中数据的正确、有效性和完整性<br>分类：<br>非空约束——not null<br>唯一约束——unique<br>主键约束——primary key<br>默认约束——default<br>检查约束——check<br>外键约束——foreign key<br>注意：约束是作用于表中字段上的，可以在创建表&#x2F;修改表的时候添加约束。<br>其实只有unique这一属性不满足时，id才会++</p><p>添加外键的语法：<br>alter table 表名 add constraint 外键名称 foreign key (外键字段名) references 主表（主表列名）</p><p>删除外键的语法：<br>alter table 表名 drop foreign key 外键名称；</p><p>字段图标中出现黄色小钥匙是主键的意思，出现蓝色小钥匙是外键的意思。</p><p>表的关系：<br>一对多，多对多<br>多对多的实现方式是通过建立第三张中间表，中间表至少包含两个外键，分别关联两方主键</p><p>连接查询<br>内连接查询语法：<br>隐式内连接： select 字段列表 from 表1，表2 where 条件 … ;<br>显式内连接：select 字段列表 from 表1 [inner] join 表2 on 连接条件 … ;</p><p>对于为什么取交集这一问题，原因在于两张数据表保持的信息是不一样的，只能通过外键去寻找。</p><p>左外连接：<br>select 字段列表 from 表1 left [outer] join 表2 on 条件 …;<br>右外连接：<br>select 字段列表 from 表1 right [output] join 表2 on 条件 …;</p><p>自连接查询语法：<br>select 字段列表 from 表A 别名A join 表A 别名B on 条件 … ;<br>自连接查询，可以是内连接查询，也可以是外连接查询。</p><p>联合查询<br>对于union查询，就是把多次查询的结果合并起来，形成一个新的查询结果集。<br>select 字段列表 from 表A …<br>union [all]<br>select 字段列表 from 表B … ;<br>注意：这里的all如果有的话就是不进行数据的去重操作，只是将两个表的查询结果进行合并。一旦有all的话，那就是要求进行查重处理。同时，对于联合查询的多张表的列数必须保持一致，字段类型也需要保持一致。</p><p>子查询<br>概念：sql语句中嵌套select语句，称为嵌套查询，又称子查询。<br>实例：select * from t1 where column &#x3D; (select column from t2);<br>子查询外部的语句可以是insert &#x2F; update &#x2F; delete &#x2F; select 的任何一个。</p><p>事务：<br>1、事务简介：事务是一组操作的集合，这组操作，要么全部执行成功，要么全部执行失败。<br>2、事务操作：<br>start transaction; &#x2F;&#x2F; 开启事务<br>commit &#x2F; rollback; &#x2F;&#x2F;提交&#x2F;回滚事务<br>3、事务的四大特性：<br>原子性（atomicity）:事务是不可分割的最小操作单元，要么全部成功，要么全部失败。<br>一致性（concistency）:事务完成时，必须使所有的数据都保持一致状态。<br>隔离性（isolation）：数据库系统提供的隔离机制，保证事务在不受外部并发操作影响的独立环境下运行。<br>持久性（durability）：事务一旦提交或回滚，它对数据库中的数据的改变就是永久的。<br>4、并发事务问题<br>脏读、不可重复读、幻读<br>5、事务隔离级别<br>read uncommitted、read committed、repeatable read、serializable</p>]]></content>
      
      
      <categories>
          
          <category> 大厦的钉子 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 钉子 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git上项目的合作贡献</title>
      <link href="/2023/07/23/git%E4%B8%8A%E9%A1%B9%E7%9B%AE%E7%9A%84%E5%90%88%E4%BD%9C%E8%B4%A1%E7%8C%AE/"/>
      <url>/2023/07/23/git%E4%B8%8A%E9%A1%B9%E7%9B%AE%E7%9A%84%E5%90%88%E4%BD%9C%E8%B4%A1%E7%8C%AE/</url>
      
        <content type="html"><![CDATA[<h3 id="该经验仅限于后续加入项目的成员进行开发项目的关联与贡献操作"><a href="#该经验仅限于后续加入项目的成员进行开发项目的关联与贡献操作" class="headerlink" title="该经验仅限于后续加入项目的成员进行开发项目的关联与贡献操作"></a>该经验仅限于后续加入项目的成员进行开发项目的关联与贡献操作</h3><ul><li><p>首先不能通过下载安装包的形式，这样的话没有通过gitbash进行管理，就不能够将本地的分支与远程仓库的分支进行连接了，就无法进行正常的git pull与git push了；</p></li><li><p>第二，对git clone下来的文件中进行代码的创作后，先要git pull origin “你现在所在的分支的名字”,关联远程仓库中该分支的信息，便于后续的更新。</p></li><li><p>第三，git push origin “本地分支所开发的分支”</p></li><li><p>第四，然后在github项目中会看到一个小绿的东西，那就是所谓的”PR”，即push request推送到仓库分支的请求</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> github </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github 上的开发经验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基类对象初始化基类对象</title>
      <link href="/2023/06/22/%E5%9F%BA%E7%B1%BB%E5%AF%B9%E8%B1%A1%E5%88%9D%E5%A7%8B%E5%8C%96%E5%9F%BA%E7%B1%BB%E5%AF%B9%E8%B1%A1/"/>
      <url>/2023/06/22/%E5%9F%BA%E7%B1%BB%E5%AF%B9%E8%B1%A1%E5%88%9D%E5%A7%8B%E5%8C%96%E5%9F%BA%E7%B1%BB%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<p>在C++的期末考试中，遇到了关于用子类对象去初始化基类对象的情况，并且综合运用了<br>指针、引用与直接调用的方式进行相应的操作，以判断相应的输出结果。相应的代码如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">class A&#123;</span><br><span class="line">    public:</span><br><span class="line">    int i=10;</span><br><span class="line">    virtual void print()&#123;cout&lt;&lt;&quot;class A=&quot;&lt;&lt;i&lt;&lt;endl;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class B:public A&#123;</span><br><span class="line">    public:</span><br><span class="line">    B(void)&#123;i=20;&#125;</span><br><span class="line">    void print()&#123;cout&lt;&lt;&quot;classB&quot;&lt;&lt;endl;&#125;</span><br><span class="line">&#125;;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    B b;</span><br><span class="line">    A a1 = b;      // 此处使用赋值的方式进行初始化。基类对象的数据将会被覆盖，但是基类的虚函数指针不变</span><br><span class="line">    A &amp;a2 = b;      // 以引用的方式进行基类对象的初始化</span><br><span class="line">    A *a3 = &amp;b;     // 以指针的方式进行基类对象的初始化</span><br><span class="line">    a1.print();</span><br><span class="line">    a2.print();</span><br><span class="line">    a3-&gt;print();</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相应的结果如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class A=20</span><br><span class="line">class B</span><br><span class="line">class B</span><br></pre></td></tr></table></figure><p>从上述结果可以很清楚的看到，由于基函数中将void print()函数声明为了virtual函数，因此，当采用赋值的方式时，其函数部分还是virtual声明的函数部分，但是所调用的数据则是子类对象本身的。但是通过引用和指针的方式，则顺利地调用子类对象的print()函数，这种方法跟声明一个指向基类的指针，然后指向子类对象的道理其实是一样的。</p><p>有趣的是，当我去掉virtual声明后的结果就有一点不一样了：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">class A&#123;</span><br><span class="line">    public:</span><br><span class="line">    int i=10;</span><br><span class="line">    virtual void print()&#123;cout&lt;&lt;&quot;class A=&quot;&lt;&lt;i&lt;&lt;endl;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class B:public A&#123;</span><br><span class="line">    public:</span><br><span class="line">    B(void)&#123;i=20;&#125;</span><br><span class="line">    void print()&#123;cout&lt;&lt;&quot;classB&quot;&lt;&lt;endl;&#125;</span><br><span class="line">&#125;;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    B b;</span><br><span class="line">    A a1 = b;      // 此处使用赋值的方式进行初始化。基类对象的数据将会被覆盖，但是基类的虚函数指针不变</span><br><span class="line">    A &amp;a2 = b;      // 以引用的方式进行基类对象的初始化</span><br><span class="line">    A *a3 = &amp;b;     // 以指针的方式进行基类对象的初始化</span><br><span class="line">    a1.print();</span><br><span class="line">    a2.print();</span><br><span class="line">    a3-&gt;print();</span><br><span class="line">    return 0;</span><br></pre></td></tr></table></figure><p>相应的结果是：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">classA=20</span><br><span class="line">classA=20</span><br><span class="line">classA=20</span><br></pre></td></tr></table></figure><p>事实上，并不是很难理解。除去了virtual后，虽然说是在子类对象中是用同名进行覆盖了print()函数，但覆盖本身就是说有基类的内容，只是不显示而已。其相当于在子类对象将从基类继承过来的print()函数进行了基类的函数以及数据的初始化，用的还是基类自己的函数。当然，相应的数据还是被子类对象的数据进行了刷新的。</p>]]></content>
      
      
      <categories>
          
          <category> C plus plus </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C plus plus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于类对象的private调用问题</title>
      <link href="/2023/06/22/%E5%85%B3%E4%BA%8Eprivate%E8%B0%83%E7%94%A8%E9%97%AE%E9%A2%98/"/>
      <url>/2023/06/22/%E5%85%B3%E4%BA%8Eprivate%E8%B0%83%E7%94%A8%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h3 id="面向对象的遇到的类内声明中对private数据的调用"><a href="#面向对象的遇到的类内声明中对private数据的调用" class="headerlink" title="面向对象的遇到的类内声明中对private数据的调用"></a>面向对象的遇到的类内声明中对private数据的调用</h3><pre><code>今天翻看C++课件，发现有趣的东西</code></pre><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class CComplex&#123;</span><br><span class="line">public:</span><br><span class="line">         void output()</span><br><span class="line">&#123;  cout&lt;&lt;real;</span><br><span class="line">    cout&lt;&lt;image;  &#125;</span><br><span class="line"></span><br><span class="line">         double get_real() </span><br><span class="line">        &#123;   return real;   &#125;</span><br><span class="line">        double get_image()  </span><br><span class="line">        &#123;   return image；&#125;</span><br><span class="line">        void reset(double r,double i)</span><br><span class="line">        &#123;   real=r;   image=i;  &#125;</span><br><span class="line"></span><br><span class="line">       CComplex add( CComplex c2)</span><br><span class="line">      &#123;  CComplex  c;</span><br><span class="line">         c.real=real+c2.real;</span><br><span class="line">         c.image=image+c2.image;</span><br><span class="line">        return c; &#125;</span><br><span class="line">private:</span><br><span class="line">double real;</span><br><span class="line">double image;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>当时一开始看到这个时，心想是不是有错误的，因为看到add函数中对新建的对象的私有成员数据进行了直接的调用与赋值（但real、image不是对象的私有成员吗？），而且这也没有用friend友元函数进行声明，会不会是错误的？于是，作为蒟蒻的我上网查找资料，发现原来是要靠咬文嚼字来进行理解的。<br>解释：在类的成员函数中可以访问本类的私有数据，即使是通过函数参数传入的本类的另一个对象的私有数据，也可以正常访问，即“本类的私有数据”由所有本类的对象的私有数据组成。但是在A类中无法直接访问B类的私有数据，但可以通过友元类实现。<br>    说人话：就是在类中定义的函数对数据成员来说是可以调用的。</p><p>###函数的参数里面有const限定时，函数的表示形式<br>    当所调用的函数里面有const数据时，其函数要在末尾加上const标识符，暗示函数是常函数</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MyString strcpy1( const MyString &amp;s1) ;</span><br></pre></td></tr></table></figure><p>上述代码中形参用了const型数据，但是没有在末尾加上const标识符，编译系统会报错。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">passing &#x27;const MyString&#x27; as &#x27;this&#x27; argument discards qualifiers [-fpermissive]</span><br></pre></td></tr></table></figure><p>因此正确的操作应为这样子的</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MyString strcpy1( const MyString &amp;s1) const;</span><br></pre></td></tr></table></figure><p>网上查到的解释是：传进去的const数据是不能够被更改的，当函数没有标识为const并且实际没有对const数据进行改动时，系统还是认为这个函数对const数据进行了改动，因此，在函数的声明以及定义处还是要加上const限定符才可。</p><p>###关于为什么会有在一个对象中调用其成员函数来生成一个对象，并将其赋值给其它对象的认识<br>认识：有的创建对象要基于某个对象的数据的话就要在这个对象的数据基础上进行调用。如一本书的id号需要在前一本图书的id+1</p><p>###关于运算符重载遇到的问题<br>题目：有两个矩阵a和b，均为n行n列。求两个矩阵之和。重载运算符“+”，使之能用矩阵相加<br>实现的代码如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">class Matrix&#123;</span><br><span class="line">    private:</span><br><span class="line">    int rows,cols;</span><br><span class="line">    int **data;</span><br><span class="line"></span><br><span class="line">    public:</span><br><span class="line">    Matrix();</span><br><span class="line">    Matrix(int r);</span><br><span class="line">    Matrix(const Matrix&amp;);</span><br><span class="line">    ~Matrix();</span><br><span class="line">    // void input();</span><br><span class="line">    // void display();</span><br><span class="line">    friend Matrix operator+(Matrix &amp;a,Matrix &amp;b);</span><br><span class="line">    Matrix&amp; operator =(const Matrix&amp;);</span><br><span class="line">    friend istream&amp; operator &gt;&gt;(istream &amp;input,Matrix&amp;a);</span><br><span class="line">    friend ostream&amp; operator &lt;&lt;(ostream &amp;output, Matrix &amp;a);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">istream&amp; operator &gt;&gt;(istream &amp;input,Matrix&amp;a)&#123;</span><br><span class="line">    cout&lt;&lt;&quot;请输入相应矩阵的值：&quot;&lt;&lt;endl;</span><br><span class="line">    for(int i=0;i&lt;a.rows;i++)&#123;</span><br><span class="line">        for(int j=0;j&lt;a.rows;j++)&#123;</span><br><span class="line">            input&gt;&gt;a.data[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return input;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ostream&amp; operator &lt;&lt;(ostream &amp;output, Matrix &amp;a)&#123;</span><br><span class="line">    output&lt;&lt;&quot;这是相应矩阵的情况：&quot;&lt;&lt;endl;</span><br><span class="line">    for(int i=0;i&lt;a.rows;i++)&#123;</span><br><span class="line">        for(int j=0;j&lt;a.rows;j++)&#123;</span><br><span class="line">            output&lt;&lt;a.data[i][j]&lt;&lt;&#x27; &#x27;;</span><br><span class="line">        &#125;</span><br><span class="line">        output&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    return output;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Matrix&amp; Matrix::operator = (const Matrix&amp; other)&#123;       // 其实就是因为不能通过简单的赋值运算去填充相应的值</span><br><span class="line">    if(this != &amp;other)&#123;</span><br><span class="line">        for(int i=0;i&lt;rows;i++)&#123;</span><br><span class="line">            delete []data[i];</span><br><span class="line">        &#125;</span><br><span class="line">        delete []data;</span><br><span class="line"></span><br><span class="line">        rows = other.rows;</span><br><span class="line">        cols = other.cols;</span><br><span class="line">        data = new int*[cols];</span><br><span class="line">        for(int i=0;i&lt;rows;i++)&#123;</span><br><span class="line">            data[i] = new int[cols];</span><br><span class="line">            for(int j=0;j&lt;rows;j++)&#123;</span><br><span class="line">                data[i][j] = other.data[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return *this;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Matrix::Matrix(const Matrix&amp; other)&#123;</span><br><span class="line">    rows = other.rows;</span><br><span class="line">    cols = other.cols;</span><br><span class="line">    data = new int*[cols];</span><br><span class="line">    for(int i=0;i&lt;rows;i++)&#123;</span><br><span class="line">        data[i] = new int[cols];</span><br><span class="line">        for(int j=0;j&lt;rows;j++)&#123;</span><br><span class="line">            data[i][j] = other.data[i][j];      // 现在仍属于类内部，因此可以直接的引用</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Matrix operator+(Matrix &amp;a,Matrix &amp;b)&#123;</span><br><span class="line">    Matrix c(a.rows);</span><br><span class="line">    for(int i=0;i&lt;a.rows;i++)&#123;</span><br><span class="line">        for(int j=0;j&lt;a.rows;j++)&#123;</span><br><span class="line">            c.data[i][j] = a.data[i][j] + b.data[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Matrix::~Matrix()&#123;</span><br><span class="line">    for(int i=0;i&lt;rows;i++)&#123;</span><br><span class="line">        delete[]data[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    delete[]data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Matrix::Matrix(int r)&#123;</span><br><span class="line">    rows = r;</span><br><span class="line">    cols = r;</span><br><span class="line">    data = new int*[rows];</span><br><span class="line">    for(int i=0;i&lt;rows;i++)&#123;</span><br><span class="line">        data[i] = new int[cols];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Matrix::Matrix()&#123;</span><br><span class="line">    rows = 0;</span><br><span class="line">    cols = 0;</span><br><span class="line">    data = nullptr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    cout&lt;&lt;&quot;请输入想要处理的数组大小（正方形）：&quot;&lt;&lt;endl;</span><br><span class="line">    int n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    Matrix a(n),b(n),c(n);</span><br><span class="line">    cin&gt;&gt;a;</span><br><span class="line">    cout&lt;&lt;a;</span><br><span class="line">    cin&gt;&gt;b;</span><br><span class="line">    cout&lt;&lt;b;</span><br><span class="line">    c = a+b;</span><br><span class="line">    cout&lt;&lt;c;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>疑问：为什么我要对“&#x3D;”进行运算符重载操作？<br>解答：在默认情况下，C++中提供的赋值运算符只能“浅拷贝”一个对象，即将一个对象的地址指向另一个对象的地址。这种简单的赋值运算符并没有为指针类型的数据成员分配新的内存空间。</p><p>在本代码中，类Matrix中包含指向二维数组的指针，因此需要在重载赋值运算符时，手动分配新的内存空间并深度拷贝数据，即逐个复制数据成员的值。</p><p>否则，如果使用默认的赋值运算符进行赋值，则两个不同的Matrix对象将共享同一块内存空间，容易发生悬挂指针问题和程序崩溃等错误。</p>]]></content>
      
      
      <categories>
          
          <category> C plus plus </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C plus plus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于学习前端的一些基础知识</title>
      <link href="/2023/06/22/%E5%AD%A6%E4%B9%A0%E5%89%8D%E7%AB%AF%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
      <url>/2023/06/22/%E5%AD%A6%E4%B9%A0%E5%89%8D%E7%AB%AF%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<p>##web基础<br>1、display:inline-block;  这段代码其实就是将原来的块元素转化为一个块内元素，从而能够控制高度、宽度等特性。这段代码用于设置元素的显示方式。之所以要这样进行转换，原因是：只有块元素才可以设置width和height，行内元素是无法设置width和height的。</p><p>2、大家一定要搞清楚，背景图片跟普通图片（即img标签）是不同的东西！width和height这两个属性只能用来定义img标签图片的大小，是不能用于控制背景图片的大小。</p><p>3、浮动的盒子可以直接给大小，无需进行转换</p><p>4、当父元素的高度未定义时，它的高度将由其内容决定。浮动元素会从正常的文档流中脱离，并且不会对父元素的高度产生影响。因此，无论你如何设置浮动子元素的 margin 值，它们都不会影响到父元素的布局。</p><p>这是因为浮动元素被视为一种”非替代性元素”，它们不占据文档流中的空间位置。相反，它们会漂浮在普通流的上层，并且允许其他元素在其周围进行布局。</p><p>要解决这个问题，你可以尝试以下方法之一：</p><p>清除浮动：在父元素的 CSS 样式中添加一个额外的属性 overflow: auto 或 overflow: hidden，这将触发 BFC（块级格式化上下文），使父元素包裹浮动子元素。</p><p>5、 当用浮动去处理元素的位置不够时，将父元素的宽度搞大一些就可以了</p><p>6、text-align是让文字在页面中居中（包括文字内容、行内块、行内元素都可以居中对齐 ）</p><p>7、可以用display：inline-block将相应的块元素转化为行内元素来进行内容的居中</p><p>8、document.write()这个方法本身就是用来输出一个字符串的。</p><p>9、Javascript中的加法运算符有一点需要注意的是：其字符串 + 数字 &#x3D; 字符串。</p><p>10、在实际开发中，如果想要将数字转换为字符串来用，我们很少使用toString()方法，而更多使用隐式类型转换的方式（也就是直接跟一个字符串相加）就行了。</p><p>11、实际上，JavaScript中的转义字符很多，但是我们只需要记住上面3种就可以了。此外还需要特别说明一下，对于字符串的换行，有以下2种情况。</p><ul><li><p>（1）如果是在document.write()中换行，则应该用：<br/></p></li><li><p>（2）如果是在alert()中换行，则应该用：\n</p></li></ul><p>12、’\n’是转义字符，一般用于对话框文本的换行。alert如果用的话，就无法实现了。</p><p>13、Javascript中函数的调用可以在a链接中进行调用</p><p>14、在JavaScript中，我们可以使用split()方法把一个字符串分割成一个数组，这个数组存放的是原来字符串的所有字符片段。有多少个片段，数组元素个数就是多少。</p><p>15、str.split(“”)（无空格）是一个带有0个字符的字符串，也叫空字符串。</p><p>16、实际上，split()方法有两个参数：第1个参数表示分割符；第2个参数表示获取分割之后截取的前n个元素。不过第2个参数我们很少用，了解一下即可。</p><p>17、在JavaScript中，我们可以使用new关键字来创建一个数组。创建数组，常见的有两种形式：一种是“完整形式”；另外一种是“简写形式”。</p><p>18、在实际开发中，我们更倾向于使用简写形式来创建一个数组：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [];                <span class="comment">//创建一个空数组</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">&quot;HTML&quot;</span>,<span class="string">&quot;CSS&quot;</span>, <span class="string">&quot;JavaScript&quot;</span>];   <span class="comment">//创建一个包含3个元素的数组</span></span><br></pre></td></tr></table></figure><p>19、其实一个数组是可以存储“不同数据类型”的数据的，只不过我们极少那样做。一般情况下，都是用数组来存储“相同数据类型”的数据，所以这样理解就可以了。</p><p>20、有人会问，像上面这个例子，我们也可以使用arr[2]&#x3D;”JavaScript”以及arr[3]&#x3D;”jQuery”来在数组结尾来添加新的元素，这是不是意味着push()没太多存在的意义呢？其实不是这样的。当我们不知道数组有多少个元素的时候，我们就没法用下标这种方式来给数组添加新元素。此时，push()方法就相当有用了，因为它不需要知道你有多少个元素，它的目的就是在你数组的最后面添加新元素。</p><p>21、注意，getElementById()方法中的id是不需要加上井号（#）的，如果你写成getElementById(”#div1”)就是错的。</p><p>22、getElementsByTagName()方法中“elements”是一个复数，写的时候别漏掉了“s”。这是因为getElementsByTagName()获取的是多个元素（即集合），而getElementById()获取的仅仅是一个元素。</p><p>23、事实上，这是不一样的。document.getElementsByTagName(“li”)获取的是“整个HTML页面”所有的li元素，而oUl.getElementsByTagName(“li”)获取的仅仅是“id为list的ul元素”下所有li元素。</p><p>24、记住，类数组只能用到两点：length属性；下标形式。</p><p>25、oLi[i].innerHTML ——进行插入处理</p><p>26、在多年以前的JavaScript开发中，查找元素是开发人员遇到的最头疼的问题。遥想当年，“程序猿”们一边擦着眼泪，一边憧憬着：“要是JavaScript也有一套类似于CSS选择器的东西，我宁愿不要女朋友！”然而这个梦想现在已经实现了，而大家却反悔了！——这里的CSS选择器指的是querySelector()和querySelectorAll()</p><p>27、getElementsByName()获取的也是一个类数组，如果想要准确得到某一个元素，可以使用数组下标形式来获取。</p><p>getElementsByName()只用于表单元素，一般只用于单选按钮和复选框。</p><p>28、A.appendChild(B)表示把B插入到A内部中去，也就是使得B成为A的子节点。</p><p>29、在DOM中，每一个元素节点都被看成是一个对象。既然是对象，我们就可以像给对象属性赋值那样，给元素的属性进行赋值。例如想给添加一个id属性，就可以这样写：oInput.id &#x3D; “submit”。想要添加一个type属性，就可以这样写：oInput.type&#x3D;“button”，以此类推。</p><p>30、在操作动态DOM时，设置元素class用的是className而不是class，这是初学者最容易忽略的地方。</p><p>31、HTML属性操作，指的是使用JavaScript来操作一个元素的HTML属性。在JavaScript中，有两种操作HTML元素属性的方式：一种是使用“对象属性”；另外一种是使用“对象方法”。</p><p>32、文本框中浏览器会自动的给相应节点加上value属性的</p><p>33、getElementsByName()只限用于表单元素，它获取的也是一个元素集合，也就是类数组。</p><p>34、在JavaScript中，我们可以使用getAttribute()方法来获取元素的某个属性的值。</p><p>35、在JavaScript中，我们可以使用cssText属性来同时设置多个CSS属性，这也是在元素的style属性来添加的。</p><p>36、上面已经把CSS属性操作介绍得差不多了，不过还剩下最后一个问题，那就是：获取CSS属性值，不可以用obj.style.attr或obj.style.cssText吗？为什么一定要用getComputedStyle()呢？对于这个疑问，我们可以先用例子试一下嘛。</p><p>37、当我们点击按钮后，会发现对话框的内容是空的，也就是没有获取成功。为什么呢？其实我们都知道，obj.style.attr只可以获取元素style属性中设置的CSS属性，对于内部样式或者外部样式，它是没办法获取的。请看下面例子。</p><p>38、使用style对象来设置样式时，为什么我们不能使用background-color这种写法，而必须使用backgroundColor”这种骆驼峰型写法呢？</p><p>大家别忘了，在obj.style.backgroundColor中，backgroundColor其实也是一个变量，变量中是不允许出现中划线的，因为中划线在JavaScript中是减号的意思。</p><p>39、在JavaScript中，我们可以使用innerHTML属性很方便地获取和设置一个元素的“内部元素”，也可以使用innerText属性获取和设置一个元素的“内部文本”。</p><p>40、在JavaScript中，onbeforeunload表示离开页面之前触发的一个事件。</p><p>41、在前面的学习中，如果想要给元素添加一个事件，我们都是通过操作HTML属性的方式来实现，这种方式其实也叫“事件处理器”。</p><p>从上面也可以看出来了，事件处理器是没办法为一个元素添加多个相同事件的。</p><p>我们可以使用事件监听器这种方式来为同一个元素添加多个相同的事件，而这一点是事件处理器做不到的。</p><p>42、如果想要为一个元素添加多个相同的事件，该如何实现呢？这就需要用到另外一种添加事件的方式了，那就是——事件监听器。</p><p>43、在JavaScript中，我们可以使用removeEventListener()方法为元素解绑（或解除）某个事件。解绑事件与绑定事件是相反的操作。</p><p>对于removeEventListener()方法来说，fn必须是一个函数名，而不能是一个函数。</p><p>44、在JavaScript中，我们可以通过event对象来获取一个事件的详细信息。这里只是介绍一下常用的属性，更深入的内容我们在JavaScript进阶中再详细讲解。其中event对象常用属性如表所示</p><p>45、几乎所有的初学者（包括当年的我）都会有一个疑问：“这个e是什么？为什么写个e.type就可以获取到事件的类型呢？”</p><p>实际上，每次调用一个事件的时候，JavaScript都会默认给这个事件函数加上一个隐藏的参数，这个参数就是event对象。一般来说，event对象是作为事件函数的第1个参数传入的。</p><p>46、之前接触过不少初学者，很多人都容易搞混这两个写法，如写成setTimeout(alertMes(), 2000)或者setTimeout(“alertMes”, 2000)，我们一定要注意这一点。一般情况下，我们只需要掌握setTimeout(alertMes, 2000)这一种写法就可以了，原因有2个：一是这种写法性能更高；二是可以避免两种写法造成记忆混乱。</p><p>47、从上一章中我们知道，document对象其实是window对象下的一个子对象，它操作的是HTML文档里所有的内容。事实上，浏览器每次打开一个窗口，就会为这个窗口生成一个window对象，并且会为这个窗口内部的页面（即HTML文档）自动生成一个document对象，然后我们就可以通过document对象来操作页面中所有的元素了。</p><p>##ECMAScricpt6</p><p>1、注意，ES6 内部使用严格相等运算符（&#x3D;&#x3D;&#x3D;），判断一个位置是否有值。</p><p>2、上面代码中，如果一个数组成员是null，默认值就不会生效，因为null不严格等于undefined。</p><p>##Vuex</p><p>1、vuex中state数据的修改只能通过mutations来进行修改，其步骤是：一：定义mutations对象，对象中存放修改state的方法，然后组件中提交调用mutations：this.$store.commit(“addCount”)</p><p>2、this.$store.commit(“addCount”)带参数的形式是：this.$store.commit(“addCount”,参数)</p><p>3、actions，用于处理异步操作</p><p>4、在Vue.js中，this.$route.params是一个对象，它包含了当前路由的参数。当你在路由路径中定义了动态参数时，比如&#x2F;user&#x2F;:userId，你可以通过this.$route.params.userId来访问userId这个参数的值。</p><p>举个例子，如果你的路由路径是&#x2F;user&#x2F;123，那this.$route.params.userId的值就是123。</p><p>你可以在Vue组件使用this.$route.params来获取路由参数，并根据参数的进行相应的操作。</p><h2 id="Vue3小兔鲜"><a href="#Vue3小兔鲜" class="headerlink" title="Vue3小兔鲜"></a>Vue3小兔鲜</h2><p>1、ref的使用：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 1、导入ref函数</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">import &#123;ref&#125; from &#x27;vue&#x27;</span><br><span class="line">//2、执行函数 传入参数[简单类型 + 对象类型] 变量接收</span><br><span class="line">const count = ref(0)</span><br><span class="line">const setCount = ()=&gt;&#123;</span><br><span class="line">  // 脚本区域修改ref产生的的响应式对象数据 必须通过.value属性</span><br><span class="line">  count.value++</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">   &lt;button @click=&quot;setCount&quot;&gt;&#123;&#123; count &#125;&#125;&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>2、watch的使用：</p><p>ref对象不用加.value</p><p>3、路由参数变化的时候，可以把分类数据接口重新发送（以下这样做的缘由其实就是route.params.id并不是与路由实时同步的，存在滞后性，所以要用to来实时的接收对象，并给发送请求数据的函数进行to传参）</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">onBeforeRouteUpdate</span>(<span class="function">(<span class="params">to</span>)=&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(to)  <span class="comment">// 这里的to其实就是一个对象了，你会发现to就是最新请求到的路由路径</span></span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>4、路由缓存问题产生的原因是什么？</p><p>  路由只有参数变化时，会复用组件实例</p><p>5、模板字符串</p><p>模板字符串其实就是允许嵌入表达式的字符串（可以使用多行字符串和字符串插值功能）</p><p>6、vue中的可选链</p><p>根据黑马的演示是<code>/category/sub/$&#123;goods.categories?.[0].id&#125;</code>，在这个例子中，只有当good.categories有值才可以进行后续的路由的拼接</p>]]></content>
      
      
      <categories>
          
          <category> webFront </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webFront </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cheno第一篇</title>
      <link href="/2023/05/27/Cherno%E8%A7%86%E9%A2%91/"/>
      <url>/2023/05/27/Cherno%E8%A7%86%E9%A2%91/</url>
      
        <content type="html"><![CDATA[<h2 id="学习油管大佬C-的一些随笔集"><a href="#学习油管大佬C-的一些随笔集" class="headerlink" title="学习油管大佬C++的一些随笔集"></a>学习油管大佬C++的一些随笔集</h2><p>事情的起由是同学问我C++学得怎样的时候听我说就啃了谭浩强之后，叫我看一下这个油管的讲，事实上愈到后面，就真的啃不下去了，最终定格在了80集左右，感觉有空的话多看看这些C++知识还是可以的。链接如下：<br><a href="https://www.bilibili.com/video/BV1uy4y167h2/?spm_id_from=333.788&vd_source=ed9e2e298fac45cc6798bd67cd16499a">Cherno C++</a></p><h3 id="1-编译器是怎么工作的："><a href="#1-编译器是怎么工作的：" class="headerlink" title="1.编译器是怎么工作的："></a>1.编译器是怎么工作的：</h3><p>计算机底层运行的都是01二进制串，要运行类似这样的代码:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    std::cout&lt;&lt;&quot;hello world!&quot;;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要先将其转化为二进制机器码才可使机器正常运行，而转化这些代码为机器码的过程就叫做编译。</p><p>编译的第一步————配置(configure)</p><p>配置说白了就是电脑的环境不同，所下载的软件放在的电脑的哪个位置，所生成的编译文件要放哪。这可能是比较繁琐的过程，相信大家都有过为软件配置环境的过程。可以抽象的想象计算机像一间房子，不同的计算机的房子都不一样，同样的进门左转，小明家是厕所，小红家是厨房，进错了空间就完不成相应的目的了。所以，配环境是第一步，也是事半功倍的一步，所以还是要慢慢来，不然后边都白搞了，但是环境配好后就是起飞的第一步了。</p><p>编译的第二步————确定标准库和头文件的位置</p><p>这一步其实还是属于配置环境这一步。当你的源码中有类似<br> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br></pre></td></tr></table></figure><br>等等这些官方标准库函数和头文件时，需要告诉编译器它们在哪里，然后才才能将使用到它们的函数时能够跳到那一地方，将其代码进行编译。具体的操作就是通过配置文件，给出几个存放这些官方(standard library)和头文件(header)的目录，让编译器在遇到这些地方时能够在这些目录去找，而不是显示”找不到头文件或未声明相应的头文件”</p><p>编译的第三步————确定依赖关系</p><p>对于一个大型项目来说，源码文件的编译之间往往有依赖关系，比如用户自定义的头文件时，需要先编译。就好像定义一个类时，往往在头文件定义成员(往往包括数据成员和函数成员)，然后在类实现cpp中要引入用户自定义的类头文件，进而写具体实现相应成员函数的代码实现。这时候就需要编译器确定编译的先后顺序。假定现有A文件依赖于B文件，此时编译器应要保证以下两点：</p><pre><code>(1) 只有在B文件编译完成后，才开始编译A文件；(2) 只有当B文件发生变化时，A文件会被重新编译。</code></pre><p>编译顺序保存在一个叫做makefile的文件中，里面就有列出了相应的编译顺序，确定了哪个文件先编译，哪个文件后编译。而这一makefile文件是由configure脚本生成的，这也就解释为什么要configure是编译的第一步了，配置错误的话，编译器也不知道该生成怎样的makefile文件了。</p><p>编译的第四步————头文件的预编译</p><p>不同的源码文件，可能引用同一个头文件（如<iostream>）。在编译的时候，头文件也必须一起编译。为节省时间，编译器会在编译源码之前，先编译头文件。这就保证了头文件只需编译一次即可，不必每次调用的时候都需重新编译。(事实上这里涉及到一个概念————“链接”)。</p><p>当然，并不是所有头文件的内容都会被预编译。用来声明#define命令的，就不会预编译。</p><p>编译的第五步————预处理(Preprocessing)</p><p>预编译完成后，编译器就开始替换掉源码中的头文件和宏。再具体的说明如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    std::cout&lt;&lt;&quot;hello world!&quot;;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样看似简单的代码就会编译为：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">标准库中的函数的定义，包括但不限于上述代码中用到的冠以&quot;&lt;&lt;&quot;符号的定义，函数的重载以及定义等一大堆头文件的内容。其会很长很长，关键还是看所引入的那个库的大小了。注意这里引入的也只是头文件中的声明，具体的实现代码还要等到下面所说的链接部分。</span><br><span class="line">接着才是上述写的代码的编译。</span><br></pre></td></tr></table></figure><p>此时，插入的<br>另外，编译器在这一步还会移除与代码运行无关的注释。</p><p>编译的第六步————编译(Compilation)</p><p>在预处理(Preprocessing)后，编译器就开始生成机器码。经典的《计算机科学与技术导论》上面的步骤是：先把源码转为汇编码，然后将汇编码转为机器码。</p><p>最终得到的转码后的文件称为对象文件(Object file)</p><p>编译的第七步————连接(Linking)</p><p>前面所创建的对象文件还不能运行，必须要进一步转化为可执行文件(.exe)。事实上，这时候需要做的就是将先前(Preprocessing)所替换的类似函数声明的地方，引入相应的函数代码(通常是后缀名为.lib和.a的文件)，添加到可执行文件中。这叫做链接(Link)。这种通过拷贝，将外部函数库添加到可执行文件中的方式，叫做静态链接(static linking)，后面还会提到动态链接(dynamic linking)</p><p>第八步 安装(Installation)</p><p>上一步所生成的链接是在内存中进行的，即所生成的可执行文件(.exe)还在内存中。下一步，则需将生成的可执行文件保存到用户事先所指定的安装目录中去。</p><p>表面上，这一步很简单，就是将可执行文件（连带相关的数据文件）拷贝过去就行了。但是实际上，这一步还必须完成创建目录、保存文件、设置权限等步骤。这整个的保存过程就称为”安装”（Installation）。</p><p>编译的第九步————操作系统连接</p><p>可执行文件(.exe)成功安装后，必须以某种方式通知操作系统，让其知道可以使用这个程序。</p><p>这就要求在操作系统中，登记该程序的元数据：文件名、文件描述、关联后缀名等。</p><p>这就叫做”操作系统连接”。</p><p>编译的第十步————生成安装包<br>到这里时，对源码的编译过程基本上已经结束。但是，如果你只有源码交给用户，他们会认定你肯定是一个不友好的家伙。大部分用户想要的是直接能够运行的二进制可执行文件。这就要求开发者将上一步生成的可执行文件做成可以分发的安装包。(感觉这一步就跟我们日常生活很接近了，那就是上网下载某一个软件的安装包，然后执行安装程序后就可以直接用了~)</p><p>因此，编译器还必须有生成安装包的功能。通常是将可执行文件(连带相关的数据文件)，以某种目录结构，保存成压缩文件包，交给用户。</p><p>编译的第十一步————动态链接(Dynamic linking)</p><p>正常情况下，到这一步时，程序已经可以运行了。至于可执行程序在运行期间(runtime)发生的事情，与编译器一概无关。但是，开发者可以在编译阶段选择可执行文件连接到外部函数库的方式，到底是静态链接(在编译时连接)，还是动态连接(在程序运行时连接)。</p><p>这里解释一下动态连接的概念：<br>前面已经说过，静态连接就是把外部函数库拷贝到可执行文件中。这样做的好处是，适用范围比较广，不用担心用户运行的电脑中缺少某个库文件，但缺点是这样生成的安装包会比较大，而且在多个应用程序之间运行时，无法共享库文件。动态连接的做法正好相反，外部函数库不进入安装包，只在运行时动态引用。由此带来的好处是，安装包会比较小，多个应用程序可以共享库文件；其缺点就是依赖用户已经事先安装好了库文件，而且版本和安装位置都比较符合要求，否则就不能够正常运行。</p><p>现实中，大部分软件采用的是动态连接，共享库文件。这种动态共享文件在Linux平台中的后缀名为.so的文件，Windows平台中是.dll文件，Mac平台中是.dylib文件。</p>]]></content>
      
      
      <categories>
          
          <category> Cherno视频 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>机器学习</title>
      <link href="/2023/05/26/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
      <url>/2023/05/26/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>C++的string的传址问题</title>
      <link href="/2023/03/23/C++%E7%9A%84%E4%B8%80%E4%BA%9B%E7%9F%A5%E8%AF%86/"/>
      <url>/2023/03/23/C++%E7%9A%84%E4%B8%80%E4%BA%9B%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h3 id="让字符指针指向string时，需要将string-0-的地址赋给字符指针"><a href="#让字符指针指向string时，需要将string-0-的地址赋给字符指针" class="headerlink" title="让字符指针指向string时，需要将string[0]的地址赋给字符指针"></a>让字符指针指向string时，需要将string[0]的地址赋给字符指针</h3><p>下面的例子就是样例</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;cstring&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    string s=&quot;hello wordla!&quot;;</span><br><span class="line">    char *p;</span><br><span class="line">    p = &amp;s[0];</span><br><span class="line">    cout&lt;&lt;p&lt;&lt;endl;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以遇到带参的构造函数时，如果遇到形参为（char*）的，对应想要传进去的字符串，直接 &amp;对应字符串[0]， 就可以了。</p><h3 id="关于strcpy-s的一个问题"><a href="#关于strcpy-s的一个问题" class="headerlink" title="关于strcpy_s的一个问题"></a>关于strcpy_s的一个问题</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;cstring&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    char s1[]=&quot;hello&quot;;</span><br><span class="line">    char s2[]=&quot;world&quot;;</span><br><span class="line">    char s3[20];</span><br><span class="line">    strcpy_s(s3,2,s2);</span><br><span class="line">    cout&lt;&lt;s3;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样的话因为字节长度是明显的小于strlen(s2)时,是不够空间的，所以赋值是失败的，无法进行复制，故会发现输出null，无输出内容</p>]]></content>
      
      
      <categories>
          
          <category> C plus plus </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C plus plus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>蒟蒻学算法</title>
      <link href="/2023/03/23/%E8%92%9F%E8%92%BB%E5%AD%A6%E7%AE%97%E6%B3%95/"/>
      <url>/2023/03/23/%E8%92%9F%E8%92%BB%E5%AD%A6%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>今天遇到一题算法题，涉及到排序sort的bool判断值，如果能用到多重排序，题目就会好解很多。<br>其题目是这样的：</p><p>…….明早再补了<br>[<img src="https://s1.ax1x.com/2023/03/28/ppyImcQ.png" alt="ppyImcQ.png"></p><p>先上AC代码块：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;bits/stdc++.h&gt; </span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line">const int N = 1e5 + 7;</span><br><span class="line">struct NODE&#123;</span><br><span class="line">    long long a,w;</span><br><span class="line">&#125;node [N];</span><br><span class="line">long long n,sum,ans;</span><br><span class="line">bool cmp(NODE n1, NODE n2)&#123;</span><br><span class="line">    if(n1.a &lt; n2.a) return true;</span><br><span class="line">    if(n1.a == n2.a &amp;&amp; n1.w &lt;= n2.w) return true;</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br><span class="line">int main( )</span><br><span class="line">&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    for (int i=1;i&lt;=n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;node[i].a&gt;&gt;node[i].w;</span><br><span class="line">        sum += node[i].w;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(node + 1,node+n+1,cmp);</span><br><span class="line">    NODE temp = node[0];</span><br><span class="line">    for(int i=1;i&lt;=n+1;i++)&#123;</span><br><span class="line">        if(node[i].a != temp.a)</span><br><span class="line">            ans += temp.w;</span><br><span class="line">        temp = node[i];</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;sum - ans;</span><br><span class="line">    </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>sort排序中的自定义排序需要头文件&lt;algorithm&gt;<br>bool cmp()函数名只是便于知道这是一个比较函数，通过所返回的bool值来实行具体的排序顺序，其名字可以随意，只要满足是bool类型返回值以及符合变量命名规则即可。</p><p>sort排序中默认的排序规则是从小到大，是升序排序。那么如何改变这一默认排序规则呢？<br>举个栗子：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;algorithm&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">bool cmp(int a,int b)</span><br><span class="line">&#123;</span><br><span class="line">    return a&gt;b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的逻辑是：sort排序默认是a&amp;ltb是返回true的布尔值，而这里返回a&amp;gtb,则返回false与默认的true所矛盾，因此需要改变默认的排序方式。其实就是有一个简单的记忆方法————将想要进行的排序return true，不想的排序则返回false即可。需要注意的是，return 即代表函数的结束，函数体内剩下没执行的代码则会被忽略掉。</p><p>结构体也可以根据其成员数据进行排序，举个栗子：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;algorithm&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">struct node&#123;</span><br><span class="line">    int a;</span><br><span class="line">    int b;</span><br><span class="line">    int c;</span><br><span class="line">&#125;;</span><br><span class="line">bool cmp(node x,node y)&#123;   //传入两个结构体对象</span><br><span class="line">    if(x.a!=y.a) return x.a&lt;y.a;</span><br><span class="line">    if(x.b!=y.b) return x.b&gt;y.b;</span><br><span class="line">    if(x.c!=y.c) return x.c&lt;y.c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里定义的cmp是先按照a进行升序排序，如果a相同的话对b及逆行降序排序，如果两个结构体中a、b数据成员均相等的话，就以数据成员c进行升序排序。</p><p>而对于本题而言，其实也是根据结构体内部的数据进行排序，先利用其用数字来代表课的种类，因此可以根据课的种类对课程先进行一个升序排序，让同一种课能够在连续的一段，然后在课程的内部再进行升序排序。这样的话，在一种课的类别的最后就是该课程的最大疲劳度，再利用for循环对其最后端进行累加得到各个类别课的疲劳度的最大值的累加和ans。到这里只需在一开始输入的时候累加各门课的疲劳度即可得到总疲劳度sum，最后总疲劳度sum减去最大疲劳度累加和ans即可得到答案。</p><p>###C++进制转换的技巧</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">//dec——decimal是十进制 cout&lt;&lt;dec&lt;&lt;a 就会把b转换成10进制再输出；</span><br><span class="line">//hex——hexadecimal是16进制 cout&lt;&lt;dec&lt;&lt;a 就会把b转换成16进制再输出；</span><br><span class="line">//oct——octomal是八进制 cout&lt;&lt;dec&lt;&lt;a 就会把b转换成8进制再输出；</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int a;</span><br><span class="line">    cin&gt;&gt;a;</span><br><span class="line">    cout&lt;&lt;oct&lt;&lt;a;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法碎碎念 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/03/23/hello-world/"/>
      <url>/2023/03/23/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
