<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>MySQL基础</title>
      <link href="/2023/08/01/MySQL%E5%9F%BA%E7%A1%80/"/>
      <url>/2023/08/01/MySQL%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th>软件名</th><th>作用</th></tr></thead><tbody><tr><td>DataGrip</td><td>数据库</td></tr><tr><td>WebStorm</td><td>前端编辑器</td></tr><tr><td>IntelliJ IDEA</td><td>Java编辑器</td></tr><tr><td>PyCharm</td><td>Python编辑器</td></tr></tbody></table><p>#MySQL篇章</p><p>#####1、关系型数据库（RDBMS）<br>概念：建立在关系模型基础上，由多张相互连接的二维表组成的数据库</p><p>#####2、MySQL启动<br>net start mysql80<br>net stop mysql80</p><p>MySQL客户端连接<br>一种是：mysql -u root -p<br>另一种是：直接寻找M有SQL 8.0 Command Line Client - Unicode点击打开后即可</p><p>#####3、MySQL数据模型：数据库、表</p><p>#####4、SQL分类<br>DDL：数据定义语言，用来定义数据库对象（数据库，表，字段）<br>DML：数据操作语言，用来对数据表中的数据进行增删改<br>DQL：数据查询语言，用来查询数据库中表的记录<br>DCL：数据控制语言，用来创建数据库用户、控制数据库的访问权限</p><p>#####5、注意，在删除表时，表中的全部数据也会被删除</p><p>具体操作的代码：</p><ul><li><p>DDL数据库操作：<br>show databases; &#x2F;&#x2F; 展示已有数据库的情况；<br>create database 数据库名；&#x2F;&#x2F; 创建一个新的数据库<br>use 数据库名； &#x2F;&#x2F; 具体使用哪一个数据库<br>select database(); &#x2F;&#x2F; 查看现在在哪一个数据库中<br>drop database 数据库名； &#x2F;&#x2F; 删除哪一个数据库<br>in</p></li><li><p>DDL表操作：<br>show tables; &#x2F;&#x2F;  展示已有tables的情况<br>create table 表名 （字段 字段类型 [comment ‘   ‘]，<br>字段 字段类型 [comment ‘   ‘]，<br>字段，字段类型 [comment ‘   ‘]）[commit ‘   ‘]；&#x2F;&#x2F; 创建的表的具体的结构与表头<br>desc 表名;&#x2F;&#x2F; 展示表的结构信息<br>show create table 表名；&#x2F;&#x2F; 进一步展示表的结构信息<br>alter table 表名 add&#x2F;modify&#x2F;change&#x2F;drop&#x2F;rename to … &#x2F;&#x2F; 进行文章结构的删减与修改<br>drop table 表名；&#x2F;&#x2F; 进行删表操作</p></li><li><p>DML-添加数据<br>insert info 表名（字段名1，字段名2，…）values (值1，值2，…);&#x2F;&#x2F; 给指定字段添加数据<br>insert info 表名 values (值1，值2，…) &#x2F;&#x2F; 给全部字段添加数据<br>&#x2F;&#x2F; 批量添加数据<br>insert info 表名 (字段名1，字段名2，…) values (值1，值2，…), (值1，值2，…),(值1，值2，…);</p></li></ul><p>注意事项：</p><ul><li>1、插入数据时，指定的字段顺序需要与值的顺序是一一对应的。</li><li>2、字符串和日期型数据应该包含在引号中。</li><li>3、插入的数据大小，应该在字段的规定范围内。（比如什么varchar（5）这样子，限定你长度之类的）</li></ul><p>此处插入一个知识点：varchar 和 char 是 MySQL 中的两种数据类型，都是用来存储字符串的。<br>两者的区别在于：varchar 类型的长度是可变的，而 char 类型的长度是固定的。char 类型是一个定长的字段，以 char(10) 为例，不管真实的存储内容多大或者是占了多少空间，都会消耗掉 10 个字符的空间。但是char类型的使用效率会比较的高。</p><ul><li>DML 更新数据与删除数据<br>更新数据：update 表名 set 字段名1&#x3D;值1，字段名2&#x3D;值2，…[where 条件]；<br>注意：修改语句的条件可以有，也可以没有，如果没有条件，则会修改整张表的所有数据。<br>删除数据：delete from 表名 [where 条件]<br>注意：<br>1、delete 语句的条件可以有，也可以没有，如果没有条件，则会删除整张表的所有数据。<br>2、delete 语句不能删除某一个字段的值（可以使用update）</li></ul><p>（5）DQL语法：<br>select 字段列表<br>from 表名列表<br>where 条件列表<br>group by 分组字段列表<br>having 分组后条件列表<br>order by 排序字段列表<br>limit 分页参数</p><p>#####一、DQL基本查询<br>1、查询多个字段：<br>select 字段1，字段2，字段3… from 表名;<br>select * from 表名;<br>2、设置别名：&#x2F;&#x2F; 方便理解罢了<br>select 字段1[as 别名1],字段2[as 别名2],… from 表名；<br>3、去除重复记录（其实就是去重操作而已）<br>select distinct 字段列表 from 表名;&#x2F;&#x2F; 其实看英文意思就知道是distinct，差异性</p><p>#####二、DQL条件查询<br>select 字段列表 from 表名 where 条件列表；&#x2F;&#x2F; 代码的形式<br>一个有意思的查询条件：select * from emp where name like ‘__’; &#x2F;&#x2F; 这里的是两个下划线，表示是两个占位符，匹配到两个内容的</p><p>#####三、DQL聚合查询<br>对应的语法是：select 聚合函数（字段列表） from 表名; &#x2F;&#x2F;将一列数据作为一个整体，进行纵向计算<br>注意：null值不参与所有聚合函数运算</p><p>#####四、DQL分组查询<br>语法：select 字段列表 from 表名 [where 条件] group by 分组字段名 [having 分组后过滤条件]；<br>注意：<br>此处的where与having的区别是：<br>1、执行时机不同:where 是分组之前进行过滤，不满足where条件，不参与分组；而having是分组之后对结果进行过滤。<br>2、判断条件不同：where不能对聚合函数进行判断，而having可以<br>执行顺序：where&gt;聚合函数&gt;having。<br>分组之后，查询的字段一般为聚合函数和分组字段，查询其他字段无任何意义。</p><p>#####五、DQL排序查询<br>语法：select 字段列表 from 表名 order by 字段1 排序方式1， 字段2 排序方式2； &#x2F;&#x2F; 相应的执行代码<br>排序方式：asc——升序（默认值）     desc——降序</p><p>注意：如果是多字段排序，当第一个字段值相同时，才会根据第二个字段进行排序。</p><p>#####六、DQL分页查询<br>语法：select  字段列表 from 表名 limit 起始索引，查询记录数；<br>注意：<br>1、起始索引从0开始，起始索引从0开始，起始索引&#x3D;（查询页码-1）*每页显示记录数。<br>2、分页查询是数据库的方言，不同的数据库有不同的实现，MySQL中是LIMIT。<br>3、如果查询的是第一页数据，起始索引（）可以省略，直接简写为limit 10.</p><p>#####总结：<br>1、grouby 先于 order 先于limit 的顺序进行写代码的（其实就是<br>select<br>    字段列表<br>from<br>    表名列表<br>where<br>    条件列表<br>group by<br>    分组字段列表<br>having<br>    分组后条件列表<br>order by<br>    排序字段列表<br>limit<br>    分页参数<br>）的顺序——即编写顺序</p><p>相应的执行顺序为：<br>from<br>    表名列表<br>where<br>    条件列表<br>group by<br>    分组字段列表<br>having<br>    分组后条件列表<br>select<br>    字段列表<br>order by<br>    排序字段列表<br>limit<br>    分页参数</p><p>（6）DCL–用于管理数据库用户、控制数据库的访问权限<br>相应的代码：<br>1、查询用户</p><figure class="highlight plaintext"><figcaption><span>mysql;</span></figcaption><table><tr><td class="code"><pre><span class="line">select * from user;</span><br></pre></td></tr></table></figure><p>2、创建用户</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create user &#x27;用户名&#x27;@&#x27;主机名&#x27; identified by &#x27;密码&#x27;;</span><br></pre></td></tr></table></figure><p>3、修改用户密码</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alter user &#x27;用户名&#x27;@&#x27;主机名&#x27; identified with mysql_native_password by &#x27;新密码&#x27;;</span><br></pre></td></tr></table></figure><p>4、删除用户</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">drop user &#x27;用户名&#x27;@&#x27;主机名&#x27;;</span><br></pre></td></tr></table></figure><p>注意：<br>1、主机名可以使用%通配。<br>2、这类SQL开发人员操作的比较少，主要是DBA（Database Administrator 数据库管理员）使用。</p><p>DCL-权限（常用的权限）<br>all,all privileges——所有权限<br>select——查询数据<br>insert——插入数据<br>update——修改数据<br>delete——删除数据<br>alter——修改表<br>drop——删除数据库&#x2F;表&#x2F;视图<br>create——创建数据库&#x2F;表 </p><p>权限控制代码：<br>1、查询权限：<br>show grants for ‘用户名‘@’主机名’;<br>2、授予权限：<br>grant 权限列表 on 数据库名.表名 to ‘用户名‘@’主机名’;<br>3、撤销权限：<br>revoke 权限列表 on 数据库名.表名 from ‘用户名‘@’主机名’；<br>注意：<br>1、多个权限之间，使用逗号分隔;<br>2、授权时，数据库名和表名可以使用*进行统配，代表所有。</p><p>函数部分：<br>1、字符串函数<br>concat, lower, upper, lpad, rpad, trim, substring<br>2、数值函数<br>ceit, floor, mod, rand, round<br>3、日期函数<br>curdate, curtime, now, year, month, day, date_add, datediff<br>4、流程函数<br>if, ifnull, case […] when … then … else … end<br>流程函数的应用实例是：<br>(case when math &gt;&#x3D; 85 then ‘优秀’ when math &gt;&#x3D;60 then ‘及格’ else ‘不及格’ end) ‘数学’</p><p>约束<br>概述：约束是作用于表中字段上的规则，用于限制存储在表中的数据。<br>目的：保证数据库中数据的正确、有效性和完整性<br>分类：<br>非空约束——not null<br>唯一约束——unique<br>主键约束——primary key<br>默认约束——default<br>检查约束——check<br>外键约束——foreign key<br>注意：约束是作用于表中字段上的，可以在创建表&#x2F;修改表的时候添加约束。<br>其实只有unique这一属性不满足时，id才会++</p><p>添加外键的语法：<br>alter table 表名 add constraint 外键名称 foreign key (外键字段名) references 主表（主表列名）</p><p>删除外键的语法：<br>alter table 表名 drop foreign key 外键名称；</p><p>字段图标中出现黄色小钥匙是主键的意思，出现蓝色小钥匙是外键的意思。</p><p>表的关系：<br>一对多，多对多<br>多对多的实现方式是通过建立第三张中间表，中间表至少包含两个外键，分别关联两方主键</p><p>连接查询<br>内连接查询语法：<br>隐式内连接： select 字段列表 from 表1，表2 where 条件 … ;<br>显式内连接：select 字段列表 from 表1 [inner] join 表2 on 连接条件 … ;</p><p>对于为什么取交集这一问题，原因在于两张数据表保持的信息是不一样的，只能通过外键去寻找。</p><p>左外连接：<br>select 字段列表 from 表1 left [outer] join 表2 on 条件 …;<br>右外连接：<br>select 字段列表 from 表1 right [output] join 表2 on 条件 …;</p><p>自连接查询语法：<br>select 字段列表 from 表A 别名A join 表A 别名B on 条件 … ;<br>自连接查询，可以是内连接查询，也可以是外连接查询。</p><p>联合查询<br>对于union查询，就是把多次查询的结果合并起来，形成一个新的查询结果集。<br>select 字段列表 from 表A …<br>union [all]<br>select 字段列表 from 表B … ;<br>注意：这里的all如果有的话就是不进行数据的去重操作，只是将两个表的查询结果进行合并。一旦有all的话，那就是要求进行查重处理。同时，对于联合查询的多张表的列数必须保持一致，字段类型也需要保持一致。</p><p>子查询<br>概念：sql语句中嵌套select语句，称为嵌套查询，又称子查询。<br>实例：select * from t1 where column &#x3D; (select column from t2);<br>子查询外部的语句可以是insert &#x2F; update &#x2F; delete &#x2F; select 的任何一个。</p><p>事务：<br>1、事务简介：事务是一组操作的集合，这组操作，要么全部执行成功，要么全部执行失败。<br>2、事务操作：<br>start transaction; &#x2F;&#x2F; 开启事务<br>commit &#x2F; rollback; &#x2F;&#x2F;提交&#x2F;回滚事务<br>3、事务的四大特性：<br>原子性（atomicity）:事务是不可分割的最小操作单元，要么全部成功，要么全部失败。<br>一致性（concistency）:事务完成时，必须使所有的数据都保持一致状态。<br>隔离性（isolation）：数据库系统提供的隔离机制，保证事务在不受外部并发操作影响的独立环境下运行。<br>持久性（durability）：事务一旦提交或回滚，它对数据库中的数据的改变就是永久的。<br>4、并发事务问题<br>脏读、不可重复读、幻读<br>5、事务隔离级别<br>read uncommitted、read committed、repeatable read、serializable</p>]]></content>
      
      
      <categories>
          
          <category> 大夏的钉子 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 钉子 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git上项目的合作贡献</title>
      <link href="/2023/07/23/git%E4%B8%8A%E9%A1%B9%E7%9B%AE%E7%9A%84%E5%90%88%E4%BD%9C%E8%B4%A1%E7%8C%AE/"/>
      <url>/2023/07/23/git%E4%B8%8A%E9%A1%B9%E7%9B%AE%E7%9A%84%E5%90%88%E4%BD%9C%E8%B4%A1%E7%8C%AE/</url>
      
        <content type="html"><![CDATA[<h3 id="该经验仅限于后续加入项目的成员进行开发项目的关联与贡献操作"><a href="#该经验仅限于后续加入项目的成员进行开发项目的关联与贡献操作" class="headerlink" title="该经验仅限于后续加入项目的成员进行开发项目的关联与贡献操作"></a>该经验仅限于后续加入项目的成员进行开发项目的关联与贡献操作</h3><ul><li><p>首先不能通过下载安装包的形式，这样的话没有通过gitbash进行管理，就不能够将本地的分支与远程仓库的分支进行连接了，就无法进行正常的git pull与git push了；</p></li><li><p>第二，对git clone下来的文件中进行代码的创作后，先要git pull origin “你现在所在的分支的名字”,关联远程仓库中该分支的信息，便于后续的更新。</p></li><li><p>第三，git push origin “本地分支所开发的分支”</p></li><li><p>第四，然后在github项目中会看到一个小绿的东西，那就是所谓的”PR”，即push request推送到仓库分支的请求</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> github </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github 上的开发经验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基类对象初始化基类对象</title>
      <link href="/2023/06/22/%E5%9F%BA%E7%B1%BB%E5%AF%B9%E8%B1%A1%E5%88%9D%E5%A7%8B%E5%8C%96%E5%9F%BA%E7%B1%BB%E5%AF%B9%E8%B1%A1/"/>
      <url>/2023/06/22/%E5%9F%BA%E7%B1%BB%E5%AF%B9%E8%B1%A1%E5%88%9D%E5%A7%8B%E5%8C%96%E5%9F%BA%E7%B1%BB%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<p>在C++的期末考试中，遇到了关于用子类对象去初始化基类对象的情况，并且综合运用了<br>指针、引用与直接调用的方式进行相应的操作，以判断相应的输出结果。相应的代码如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">class A&#123;</span><br><span class="line">    public:</span><br><span class="line">    int i=10;</span><br><span class="line">    virtual void print()&#123;cout&lt;&lt;&quot;class A=&quot;&lt;&lt;i&lt;&lt;endl;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class B:public A&#123;</span><br><span class="line">    public:</span><br><span class="line">    B(void)&#123;i=20;&#125;</span><br><span class="line">    void print()&#123;cout&lt;&lt;&quot;classB&quot;&lt;&lt;endl;&#125;</span><br><span class="line">&#125;;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    B b;</span><br><span class="line">    A a1 = b;      // 此处使用赋值的方式进行初始化。基类对象的数据将会被覆盖，但是基类的虚函数指针不变</span><br><span class="line">    A &amp;a2 = b;      // 以引用的方式进行基类对象的初始化</span><br><span class="line">    A *a3 = &amp;b;     // 以指针的方式进行基类对象的初始化</span><br><span class="line">    a1.print();</span><br><span class="line">    a2.print();</span><br><span class="line">    a3-&gt;print();</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相应的结果如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class A=20</span><br><span class="line">class B</span><br><span class="line">class B</span><br></pre></td></tr></table></figure><p>从上述结果可以很清楚的看到，由于基函数中将void print()函数声明为了virtual函数，因此，当采用赋值的方式时，其函数部分还是virtual声明的函数部分，但是所调用的数据则是子类对象本身的。但是通过引用和指针的方式，则顺利地调用子类对象的print()函数，这种方法跟声明一个指向基类的指针，然后指向子类对象的道理其实是一样的。</p><p>有趣的是，当我去掉virtual声明后的结果就有一点不一样了：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">class A&#123;</span><br><span class="line">    public:</span><br><span class="line">    int i=10;</span><br><span class="line">    virtual void print()&#123;cout&lt;&lt;&quot;class A=&quot;&lt;&lt;i&lt;&lt;endl;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class B:public A&#123;</span><br><span class="line">    public:</span><br><span class="line">    B(void)&#123;i=20;&#125;</span><br><span class="line">    void print()&#123;cout&lt;&lt;&quot;classB&quot;&lt;&lt;endl;&#125;</span><br><span class="line">&#125;;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    B b;</span><br><span class="line">    A a1 = b;      // 此处使用赋值的方式进行初始化。基类对象的数据将会被覆盖，但是基类的虚函数指针不变</span><br><span class="line">    A &amp;a2 = b;      // 以引用的方式进行基类对象的初始化</span><br><span class="line">    A *a3 = &amp;b;     // 以指针的方式进行基类对象的初始化</span><br><span class="line">    a1.print();</span><br><span class="line">    a2.print();</span><br><span class="line">    a3-&gt;print();</span><br><span class="line">    return 0;</span><br></pre></td></tr></table></figure><p>相应的结果是：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">classA=20</span><br><span class="line">classA=20</span><br><span class="line">classA=20</span><br></pre></td></tr></table></figure><p>事实上，并不是很难理解。除去了virtual后，虽然说是在子类对象中是用同名进行覆盖了print()函数，但覆盖本身就是说有基类的内容，只是不显示而已。其相当于在子类对象将从基类继承过来的print()函数进行了基类的函数以及数据的初始化，用的还是基类自己的函数。当然，相应的数据还是被子类对象的数据进行了刷新的。</p>]]></content>
      
      
      <categories>
          
          <category> C plus plus </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C plus plus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于类对象的private调用问题</title>
      <link href="/2023/06/22/%E5%85%B3%E4%BA%8Eprivate%E8%B0%83%E7%94%A8%E9%97%AE%E9%A2%98/"/>
      <url>/2023/06/22/%E5%85%B3%E4%BA%8Eprivate%E8%B0%83%E7%94%A8%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h3 id="面向对象的遇到的类内声明中对private数据的调用"><a href="#面向对象的遇到的类内声明中对private数据的调用" class="headerlink" title="面向对象的遇到的类内声明中对private数据的调用"></a>面向对象的遇到的类内声明中对private数据的调用</h3><pre><code>今天翻看C++课件，发现有趣的东西</code></pre><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class CComplex&#123;</span><br><span class="line">public:</span><br><span class="line">         void output()</span><br><span class="line">&#123;  cout&lt;&lt;real;</span><br><span class="line">    cout&lt;&lt;image;  &#125;</span><br><span class="line"></span><br><span class="line">         double get_real() </span><br><span class="line">        &#123;   return real;   &#125;</span><br><span class="line">        double get_image()  </span><br><span class="line">        &#123;   return image；&#125;</span><br><span class="line">        void reset(double r,double i)</span><br><span class="line">        &#123;   real=r;   image=i;  &#125;</span><br><span class="line"></span><br><span class="line">       CComplex add( CComplex c2)</span><br><span class="line">      &#123;  CComplex  c;</span><br><span class="line">         c.real=real+c2.real;</span><br><span class="line">         c.image=image+c2.image;</span><br><span class="line">        return c; &#125;</span><br><span class="line">private:</span><br><span class="line">double real;</span><br><span class="line">double image;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>当时一开始看到这个时，心想是不是有错误的，因为看到add函数中对新建的对象的私有成员数据进行了直接的调用与赋值（但real、image不是对象的私有成员吗？），而且这也没有用friend友元函数进行声明，会不会是错误的？于是，作为蒟蒻的我上网查找资料，发现原来是要靠咬文嚼字来进行理解的。<br>解释：在类的成员函数中可以访问本类的私有数据，即使是通过函数参数传入的本类的另一个对象的私有数据，也可以正常访问，即“本类的私有数据”由所有本类的对象的私有数据组成。但是在A类中无法直接访问B类的私有数据，但可以通过友元类实现。<br>    说人话：就是在类中定义的函数对数据成员来说是可以调用的。</p><p>###函数的参数里面有const限定时，函数的表示形式<br>    当所调用的函数里面有const数据时，其函数要在末尾加上const标识符，暗示函数是常函数</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MyString strcpy1( const MyString &amp;s1) ;</span><br></pre></td></tr></table></figure><p>上述代码中形参用了const型数据，但是没有在末尾加上const标识符，编译系统会报错。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">passing &#x27;const MyString&#x27; as &#x27;this&#x27; argument discards qualifiers [-fpermissive]</span><br></pre></td></tr></table></figure><p>因此正确的操作应为这样子的</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MyString strcpy1( const MyString &amp;s1) const;</span><br></pre></td></tr></table></figure><p>网上查到的解释是：传进去的const数据是不能够被更改的，当函数没有标识为const并且实际没有对const数据进行改动时，系统还是认为这个函数对const数据进行了改动，因此，在函数的声明以及定义处还是要加上const限定符才可。</p><p>###关于为什么会有在一个对象中调用其成员函数来生成一个对象，并将其赋值给其它对象的认识<br>认识：有的创建对象要基于某个对象的数据的话就要在这个对象的数据基础上进行调用。如一本书的id号需要在前一本图书的id+1</p><p>###关于运算符重载遇到的问题<br>题目：有两个矩阵a和b，均为n行n列。求两个矩阵之和。重载运算符“+”，使之能用矩阵相加<br>实现的代码如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">class Matrix&#123;</span><br><span class="line">    private:</span><br><span class="line">    int rows,cols;</span><br><span class="line">    int **data;</span><br><span class="line"></span><br><span class="line">    public:</span><br><span class="line">    Matrix();</span><br><span class="line">    Matrix(int r);</span><br><span class="line">    Matrix(const Matrix&amp;);</span><br><span class="line">    ~Matrix();</span><br><span class="line">    // void input();</span><br><span class="line">    // void display();</span><br><span class="line">    friend Matrix operator+(Matrix &amp;a,Matrix &amp;b);</span><br><span class="line">    Matrix&amp; operator =(const Matrix&amp;);</span><br><span class="line">    friend istream&amp; operator &gt;&gt;(istream &amp;input,Matrix&amp;a);</span><br><span class="line">    friend ostream&amp; operator &lt;&lt;(ostream &amp;output, Matrix &amp;a);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">istream&amp; operator &gt;&gt;(istream &amp;input,Matrix&amp;a)&#123;</span><br><span class="line">    cout&lt;&lt;&quot;请输入相应矩阵的值：&quot;&lt;&lt;endl;</span><br><span class="line">    for(int i=0;i&lt;a.rows;i++)&#123;</span><br><span class="line">        for(int j=0;j&lt;a.rows;j++)&#123;</span><br><span class="line">            input&gt;&gt;a.data[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return input;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ostream&amp; operator &lt;&lt;(ostream &amp;output, Matrix &amp;a)&#123;</span><br><span class="line">    output&lt;&lt;&quot;这是相应矩阵的情况：&quot;&lt;&lt;endl;</span><br><span class="line">    for(int i=0;i&lt;a.rows;i++)&#123;</span><br><span class="line">        for(int j=0;j&lt;a.rows;j++)&#123;</span><br><span class="line">            output&lt;&lt;a.data[i][j]&lt;&lt;&#x27; &#x27;;</span><br><span class="line">        &#125;</span><br><span class="line">        output&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    return output;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Matrix&amp; Matrix::operator = (const Matrix&amp; other)&#123;       // 其实就是因为不能通过简单的赋值运算去填充相应的值</span><br><span class="line">    if(this != &amp;other)&#123;</span><br><span class="line">        for(int i=0;i&lt;rows;i++)&#123;</span><br><span class="line">            delete []data[i];</span><br><span class="line">        &#125;</span><br><span class="line">        delete []data;</span><br><span class="line"></span><br><span class="line">        rows = other.rows;</span><br><span class="line">        cols = other.cols;</span><br><span class="line">        data = new int*[cols];</span><br><span class="line">        for(int i=0;i&lt;rows;i++)&#123;</span><br><span class="line">            data[i] = new int[cols];</span><br><span class="line">            for(int j=0;j&lt;rows;j++)&#123;</span><br><span class="line">                data[i][j] = other.data[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return *this;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Matrix::Matrix(const Matrix&amp; other)&#123;</span><br><span class="line">    rows = other.rows;</span><br><span class="line">    cols = other.cols;</span><br><span class="line">    data = new int*[cols];</span><br><span class="line">    for(int i=0;i&lt;rows;i++)&#123;</span><br><span class="line">        data[i] = new int[cols];</span><br><span class="line">        for(int j=0;j&lt;rows;j++)&#123;</span><br><span class="line">            data[i][j] = other.data[i][j];      // 现在仍属于类内部，因此可以直接的引用</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Matrix operator+(Matrix &amp;a,Matrix &amp;b)&#123;</span><br><span class="line">    Matrix c(a.rows);</span><br><span class="line">    for(int i=0;i&lt;a.rows;i++)&#123;</span><br><span class="line">        for(int j=0;j&lt;a.rows;j++)&#123;</span><br><span class="line">            c.data[i][j] = a.data[i][j] + b.data[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Matrix::~Matrix()&#123;</span><br><span class="line">    for(int i=0;i&lt;rows;i++)&#123;</span><br><span class="line">        delete[]data[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    delete[]data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Matrix::Matrix(int r)&#123;</span><br><span class="line">    rows = r;</span><br><span class="line">    cols = r;</span><br><span class="line">    data = new int*[rows];</span><br><span class="line">    for(int i=0;i&lt;rows;i++)&#123;</span><br><span class="line">        data[i] = new int[cols];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Matrix::Matrix()&#123;</span><br><span class="line">    rows = 0;</span><br><span class="line">    cols = 0;</span><br><span class="line">    data = nullptr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    cout&lt;&lt;&quot;请输入想要处理的数组大小（正方形）：&quot;&lt;&lt;endl;</span><br><span class="line">    int n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    Matrix a(n),b(n),c(n);</span><br><span class="line">    cin&gt;&gt;a;</span><br><span class="line">    cout&lt;&lt;a;</span><br><span class="line">    cin&gt;&gt;b;</span><br><span class="line">    cout&lt;&lt;b;</span><br><span class="line">    c = a+b;</span><br><span class="line">    cout&lt;&lt;c;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>疑问：为什么我要对“&#x3D;”进行运算符重载操作？<br>解答：在默认情况下，C++中提供的赋值运算符只能“浅拷贝”一个对象，即将一个对象的地址指向另一个对象的地址。这种简单的赋值运算符并没有为指针类型的数据成员分配新的内存空间。</p><p>在本代码中，类Matrix中包含指向二维数组的指针，因此需要在重载赋值运算符时，手动分配新的内存空间并深度拷贝数据，即逐个复制数据成员的值。</p><p>否则，如果使用默认的赋值运算符进行赋值，则两个不同的Matrix对象将共享同一块内存空间，容易发生悬挂指针问题和程序崩溃等错误。</p>]]></content>
      
      
      <categories>
          
          <category> C plus plus </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C plus plus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cheno第一篇</title>
      <link href="/2023/05/27/Cherno%E8%A7%86%E9%A2%91/"/>
      <url>/2023/05/27/Cherno%E8%A7%86%E9%A2%91/</url>
      
        <content type="html"><![CDATA[<h2 id="学习油管大佬C-的一些随笔集"><a href="#学习油管大佬C-的一些随笔集" class="headerlink" title="学习油管大佬C++的一些随笔集"></a>学习油管大佬C++的一些随笔集</h2><p>事情的起由是同学问我C++学得怎样的时候听我说就啃了谭浩强之后，叫我看一下这个油管的讲，事实上愈到后面，就真的啃不下去了，最终定格在了80集左右，感觉有空的话多看看这些C++知识还是可以的。链接如下：<br><a href="https://www.bilibili.com/video/BV1uy4y167h2/?spm_id_from=333.788&vd_source=ed9e2e298fac45cc6798bd67cd16499a">Cherno C++</a></p><h3 id="1-编译器是怎么工作的："><a href="#1-编译器是怎么工作的：" class="headerlink" title="1.编译器是怎么工作的："></a>1.编译器是怎么工作的：</h3><p>计算机底层运行的都是01二进制串，要运行类似这样的代码:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    std::cout&lt;&lt;&quot;hello world!&quot;;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要先将其转化为二进制机器码才可使机器正常运行，而转化这些代码为机器码的过程就叫做编译。</p><p>编译的第一步————配置(configure)</p><p>配置说白了就是电脑的环境不同，所下载的软件放在的电脑的哪个位置，所生成的编译文件要放哪。这可能是比较繁琐的过程，相信大家都有过为软件配置环境的过程。可以抽象的想象计算机像一间房子，不同的计算机的房子都不一样，同样的进门左转，小明家是厕所，小红家是厨房，进错了空间就完不成相应的目的了。所以，配环境是第一步，也是事半功倍的一步，所以还是要慢慢来，不然后边都白搞了，但是环境配好后就是起飞的第一步了。</p><p>编译的第二步————确定标准库和头文件的位置</p><p>这一步其实还是属于配置环境这一步。当你的源码中有类似<br> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br></pre></td></tr></table></figure><br>等等这些官方标准库函数和头文件时，需要告诉编译器它们在哪里，然后才才能将使用到它们的函数时能够跳到那一地方，将其代码进行编译。具体的操作就是通过配置文件，给出几个存放这些官方(standard library)和头文件(header)的目录，让编译器在遇到这些地方时能够在这些目录去找，而不是显示”找不到头文件或未声明相应的头文件”</p><p>编译的第三步————确定依赖关系</p><p>对于一个大型项目来说，源码文件的编译之间往往有依赖关系，比如用户自定义的头文件时，需要先编译。就好像定义一个类时，往往在头文件定义成员(往往包括数据成员和函数成员)，然后在类实现cpp中要引入用户自定义的类头文件，进而写具体实现相应成员函数的代码实现。这时候就需要编译器确定编译的先后顺序。假定现有A文件依赖于B文件，此时编译器应要保证以下两点：</p><pre><code>(1) 只有在B文件编译完成后，才开始编译A文件；(2) 只有当B文件发生变化时，A文件会被重新编译。</code></pre><p>编译顺序保存在一个叫做makefile的文件中，里面就有列出了相应的编译顺序，确定了哪个文件先编译，哪个文件后编译。而这一makefile文件是由configure脚本生成的，这也就解释为什么要configure是编译的第一步了，配置错误的话，编译器也不知道该生成怎样的makefile文件了。</p><p>编译的第四步————头文件的预编译</p><p>不同的源码文件，可能引用同一个头文件（如<iostream>）。在编译的时候，头文件也必须一起编译。为节省时间，编译器会在编译源码之前，先编译头文件。这就保证了头文件只需编译一次即可，不必每次调用的时候都需重新编译。(事实上这里涉及到一个概念————“链接”)。</p><p>当然，并不是所有头文件的内容都会被预编译。用来声明#define命令的，就不会预编译。</p><p>编译的第五步————预处理(Preprocessing)</p><p>预编译完成后，编译器就开始替换掉源码中的头文件和宏。再具体的说明如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    std::cout&lt;&lt;&quot;hello world!&quot;;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样看似简单的代码就会编译为：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">标准库中的函数的定义，包括但不限于上述代码中用到的冠以&quot;&lt;&lt;&quot;符号的定义，函数的重载以及定义等一大堆头文件的内容。其会很长很长，关键还是看所引入的那个库的大小了。注意这里引入的也只是头文件中的声明，具体的实现代码还要等到下面所说的链接部分。</span><br><span class="line">接着才是上述写的代码的编译。</span><br></pre></td></tr></table></figure><p>此时，插入的<br>另外，编译器在这一步还会移除与代码运行无关的注释。</p><p>编译的第六步————编译(Compilation)</p><p>在预处理(Preprocessing)后，编译器就开始生成机器码。经典的《计算机科学与技术导论》上面的步骤是：先把源码转为汇编码，然后将汇编码转为机器码。</p><p>最终得到的转码后的文件称为对象文件(Object file)</p><p>编译的第七步————连接(Linking)</p><p>前面所创建的对象文件还不能运行，必须要进一步转化为可执行文件(.exe)。事实上，这时候需要做的就是将先前(Preprocessing)所替换的类似函数声明的地方，引入相应的函数代码(通常是后缀名为.lib和.a的文件)，添加到可执行文件中。这叫做链接(Link)。这种通过拷贝，将外部函数库添加到可执行文件中的方式，叫做静态链接(static linking)，后面还会提到动态链接(dynamic linking)</p><p>第八步 安装(Installation)</p><p>上一步所生成的链接是在内存中进行的，即所生成的可执行文件(.exe)还在内存中。下一步，则需将生成的可执行文件保存到用户事先所指定的安装目录中去。</p><p>表面上，这一步很简单，就是将可执行文件（连带相关的数据文件）拷贝过去就行了。但是实际上，这一步还必须完成创建目录、保存文件、设置权限等步骤。这整个的保存过程就称为”安装”（Installation）。</p><p>编译的第九步————操作系统连接</p><p>可执行文件(.exe)成功安装后，必须以某种方式通知操作系统，让其知道可以使用这个程序。</p><p>这就要求在操作系统中，登记该程序的元数据：文件名、文件描述、关联后缀名等。</p><p>这就叫做”操作系统连接”。</p><p>编译的第十步————生成安装包<br>到这里时，对源码的编译过程基本上已经结束。但是，如果你只有源码交给用户，他们会认定你肯定是一个不友好的家伙。大部分用户想要的是直接能够运行的二进制可执行文件。这就要求开发者将上一步生成的可执行文件做成可以分发的安装包。(感觉这一步就跟我们日常生活很接近了，那就是上网下载某一个软件的安装包，然后执行安装程序后就可以直接用了~)</p><p>因此，编译器还必须有生成安装包的功能。通常是将可执行文件(连带相关的数据文件)，以某种目录结构，保存成压缩文件包，交给用户。</p><p>编译的第十一步————动态链接(Dynamic linking)</p><p>正常情况下，到这一步时，程序已经可以运行了。至于可执行程序在运行期间(runtime)发生的事情，与编译器一概无关。但是，开发者可以在编译阶段选择可执行文件连接到外部函数库的方式，到底是静态链接(在编译时连接)，还是动态连接(在程序运行时连接)。</p><p>这里解释一下动态连接的概念：<br>前面已经说过，静态连接就是把外部函数库拷贝到可执行文件中。这样做的好处是，适用范围比较广，不用担心用户运行的电脑中缺少某个库文件，但缺点是这样生成的安装包会比较大，而且在多个应用程序之间运行时，无法共享库文件。动态连接的做法正好相反，外部函数库不进入安装包，只在运行时动态引用。由此带来的好处是，安装包会比较小，多个应用程序可以共享库文件；其缺点就是依赖用户已经事先安装好了库文件，而且版本和安装位置都比较符合要求，否则就不能够正常运行。</p><p>现实中，大部分软件采用的是动态连接，共享库文件。这种动态共享文件在Linux平台中的后缀名为.so的文件，Windows平台中是.dll文件，Mac平台中是.dylib文件。</p>]]></content>
      
      
      <categories>
          
          <category> Cherno视频 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>机器学习</title>
      <link href="/2023/05/26/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
      <url>/2023/05/26/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>C++的string的传址问题</title>
      <link href="/2023/03/23/C++%E7%9A%84%E4%B8%80%E4%BA%9B%E7%9F%A5%E8%AF%86/"/>
      <url>/2023/03/23/C++%E7%9A%84%E4%B8%80%E4%BA%9B%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h3 id="让字符指针指向string时，需要将string-0-的地址赋给字符指针"><a href="#让字符指针指向string时，需要将string-0-的地址赋给字符指针" class="headerlink" title="让字符指针指向string时，需要将string[0]的地址赋给字符指针"></a>让字符指针指向string时，需要将string[0]的地址赋给字符指针</h3><p>下面的例子就是样例</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;cstring&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    string s=&quot;hello wordla!&quot;;</span><br><span class="line">    char *p;</span><br><span class="line">    p = &amp;s[0];</span><br><span class="line">    cout&lt;&lt;p&lt;&lt;endl;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以遇到带参的构造函数时，如果遇到形参为（char*）的，对应想要传进去的字符串，直接 &amp;对应字符串[0]， 就可以了。</p><h3 id="关于strcpy-s的一个问题"><a href="#关于strcpy-s的一个问题" class="headerlink" title="关于strcpy_s的一个问题"></a>关于strcpy_s的一个问题</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;cstring&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    char s1[]=&quot;hello&quot;;</span><br><span class="line">    char s2[]=&quot;world&quot;;</span><br><span class="line">    char s3[20];</span><br><span class="line">    strcpy_s(s3,2,s2);</span><br><span class="line">    cout&lt;&lt;s3;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样的话因为字节长度是明显的小于strlen(s2)时,是不够空间的，所以赋值是失败的，无法进行复制，故会发现输出null，无输出内容</p>]]></content>
      
      
      <categories>
          
          <category> C plus plus </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C plus plus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>蒟蒻学算法</title>
      <link href="/2023/03/23/%E8%92%9F%E8%92%BB%E5%AD%A6%E7%AE%97%E6%B3%95/"/>
      <url>/2023/03/23/%E8%92%9F%E8%92%BB%E5%AD%A6%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>今天遇到一题算法题，涉及到排序sort的bool判断值，如果能用到多重排序，题目就会好解很多。<br>其题目是这样的：</p><p>…….明早再补了<br>[<img src="https://s1.ax1x.com/2023/03/28/ppyImcQ.png" alt="ppyImcQ.png"></p><p>先上AC代码块：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;bits/stdc++.h&gt; </span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line">const int N = 1e5 + 7;</span><br><span class="line">struct NODE&#123;</span><br><span class="line">    long long a,w;</span><br><span class="line">&#125;node [N];</span><br><span class="line">long long n,sum,ans;</span><br><span class="line">bool cmp(NODE n1, NODE n2)&#123;</span><br><span class="line">    if(n1.a &lt; n2.a) return true;</span><br><span class="line">    if(n1.a == n2.a &amp;&amp; n1.w &lt;= n2.w) return true;</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br><span class="line">int main( )</span><br><span class="line">&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    for (int i=1;i&lt;=n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;node[i].a&gt;&gt;node[i].w;</span><br><span class="line">        sum += node[i].w;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(node + 1,node+n+1,cmp);</span><br><span class="line">    NODE temp = node[0];</span><br><span class="line">    for(int i=1;i&lt;=n+1;i++)&#123;</span><br><span class="line">        if(node[i].a != temp.a)</span><br><span class="line">            ans += temp.w;</span><br><span class="line">        temp = node[i];</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;sum - ans;</span><br><span class="line">    </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>sort排序中的自定义排序需要头文件&lt;algorithm&gt;<br>bool cmp()函数名只是便于知道这是一个比较函数，通过所返回的bool值来实行具体的排序顺序，其名字可以随意，只要满足是bool类型返回值以及符合变量命名规则即可。</p><p>sort排序中默认的排序规则是从小到大，是升序排序。那么如何改变这一默认排序规则呢？<br>举个栗子：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;algorithm&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">bool cmp(int a,int b)</span><br><span class="line">&#123;</span><br><span class="line">    return a&gt;b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的逻辑是：sort排序默认是a&amp;ltb是返回true的布尔值，而这里返回a&amp;gtb,则返回false与默认的true所矛盾，因此需要改变默认的排序方式。其实就是有一个简单的记忆方法————将想要进行的排序return true，不想的排序则返回false即可。需要注意的是，return 即代表函数的结束，函数体内剩下没执行的代码则会被忽略掉。</p><p>结构体也可以根据其成员数据进行排序，举个栗子：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;algorithm&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">struct node&#123;</span><br><span class="line">    int a;</span><br><span class="line">    int b;</span><br><span class="line">    int c;</span><br><span class="line">&#125;;</span><br><span class="line">bool cmp(node x,node y)&#123;   //传入两个结构体对象</span><br><span class="line">    if(x.a!=y.a) return x.a&lt;y.a;</span><br><span class="line">    if(x.b!=y.b) return x.b&gt;y.b;</span><br><span class="line">    if(x.c!=y.c) return x.c&lt;y.c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里定义的cmp是先按照a进行升序排序，如果a相同的话对b及逆行降序排序，如果两个结构体中a、b数据成员均相等的话，就以数据成员c进行升序排序。</p><p>而对于本题而言，其实也是根据结构体内部的数据进行排序，先利用其用数字来代表课的种类，因此可以根据课的种类对课程先进行一个升序排序，让同一种课能够在连续的一段，然后在课程的内部再进行升序排序。这样的话，在一种课的类别的最后就是该课程的最大疲劳度，再利用for循环对其最后端进行累加得到各个类别课的疲劳度的最大值的累加和ans。到这里只需在一开始输入的时候累加各门课的疲劳度即可得到总疲劳度sum，最后总疲劳度sum减去最大疲劳度累加和ans即可得到答案。</p><p>###C++进制转换的技巧</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">//dec——decimal是十进制 cout&lt;&lt;dec&lt;&lt;a 就会把b转换成10进制再输出；</span><br><span class="line">//hex——hexadecimal是16进制 cout&lt;&lt;dec&lt;&lt;a 就会把b转换成16进制再输出；</span><br><span class="line">//oct——octomal是八进制 cout&lt;&lt;dec&lt;&lt;a 就会把b转换成8进制再输出；</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int a;</span><br><span class="line">    cin&gt;&gt;a;</span><br><span class="line">    cout&lt;&lt;oct&lt;&lt;a;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法碎碎念 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/03/23/hello-world/"/>
      <url>/2023/03/23/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
